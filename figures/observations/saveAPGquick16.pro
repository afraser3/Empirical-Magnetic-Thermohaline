pro saveAPGquick16

;Plot metallicity vs Mass for APOKASC data
;requires readcol2.pro, bkgcolor.pro, match2.pro

Rsun=696000 ; km const sheet
fake5gym6=[11236845, 11600255, 11650039, 11802037, 11775041, 11974612, 11670968, 10667966, 10403036, 10402207, 10207321, 11296211, 11135910, 11349014, 9704258, 9333501, 10069277, 10461757, 8867740, 8081145, 9143834, 8936084, 10678016, 10417308, 11046496, 9414068, 9534934, 9718024, 10016093, 6431941, 7518352, 5771513, 5860093, 5168707, 5431353, 6423690, 6502960, 6755958, 4042951, 4041405, 4548615, 2714397, 4844527]
highmal=[10337695, 10004975, 10396693,9226335]
halo=[9405480, 10992126]


ericaCN=[7812552, 3242233, 5000307, 8172679, 2423824, 8879518, 9773741, 8377727, 9824516, 12645107, 3355015, 5517442, 12316494, 2305930, 11805390, 2849476, 11152753, 7690692, 12011705, 10788540, 5016549, 4919239, 5098143, 6945727, 5113910, 3973813, 5702382, 9848308, 11134530, 3833399, 11597759, 9002884, 11969106, 5339823, 9667064, 4952516, 12785083, 10353556, 5450413, 8097926, 9468160, 9415248, 12214454, 5395942, 6629205, 8738980, 4054905, 7941510, 8441160, 5866965, 1163359, 10485923, 9601661, 8616844, 8094889, 4036007, 8611833, 9087870, 2305590, 10350934, 10219361, 8613617, 9596106, 10717091, 7672453, 5343454, 5007332, 9015765, 2850010, 4455406, 5371124, 9472064, 8234900, 9833651, 3437742, 4371562, 8453896, 9075872, 6365511, 12021730, 3735699, 10055660, 9086653, 6049399, 6780490, 9966247, 10118658, 8589163, 6101471, 12070114, 9268087, 4996676, 9905526, 6469446, 9908082, 3646933, 3935651, 9821622, 7626457, 11129945, 3947121, 10732526, 9704258, 4275434, 8586983, 10471780, 3432802, 4918972, 4764422, 4350501, 11026184, 3232838, 3968119, 10615356, 5961015, 11913049, 8742229, 12114999, 12217239, 7128999, 9662768, 11241927, 6128337, 9815488, 10754090, 11145563, 10873579, 3946701, 7523259, 12071521, 2570715, 10202324, 7031016, 12304485, 11183305, 9009957, 5285490, 12257460, 7273965, 10122158, 3425476, 11808481, 4771707, 11953668, 9287916, 2016676, 9519609, 12204548, 4478615, 11251622, 12204508, 9784586, 9326484, 3646628, 5602545, 4775208, 6701023, 3455760, 9408278, 5171575, 12067490, 6380975, 8458519, 7800922, 9049302, 10029763, 7201600, 9511816, 12202431, 9331202, 6762849, 11973569, 9513787, 4571448, 9907856, 3951748, 8359180, 9116434, 8056874, 8941196, 8418437, 10286616, 8590931, 12020797, 7906186, 9603327, 10403036, 9270087, 6875569, 12016555, 9711510, 8127707, 10224631, 3853555, 8038347, 11289759, 6465075, 5525484, 8459085, 6755958, 12060834, 10858675, 7045503, 6664950, 11192141, 10793872, 10973397, 6878403, 7417186, 10192458, 4481621, 5545719, 10538371, 3937217, 6451229, 2141255, 6208018, 10387370, 4055294, 3241374, 8349350, 5879112, 11456246, 10910839, 2697501, 4912124, 7595572, 10645209, 8107355, 9873116, 8345076, 9969574, 11099144, 4042863, 6528720, 9227589, 7630302, 11076239, 11098753, 5962470, 11566466, 6196149, 8098608, 7757271, 7974594, 10658326, 9883123, 8381505, 7954576, 7440390, 3973247, 5728738, 4169517, 9936015, 9958567, 5263007, 7976006, 3556801, 1433803, 3121427, 6522182, 5446355, 2157901, 8940098, 10000547, 8228880, 8480313, 3972675, 10744641, 6955215, 11804677, 4828670, 9542506, 12300975, 12645202, 9881628, 10873280, 8845361, 9354037, 9335191, 3634224, 3530942, 6191190, 10484140, 5306095, 5817028, 4157276, 6450613, 11663387, 5562913, 3236108, 8006058, 6762612, 10297567, 2573092, 5558110, 5002776, 7667657, 8124622, 3745153, 5283958, 6791309, 8941031, 10724620, 2572089, 6122627, 3736401, 7368594, 12455357, 11247049, 3242122, 5612549, 6276948, 7881669, 3937075, 10964584, 9700899, 8264006, 6593240, 6530242, 5685000, 10123573, 11289990, 7612916, 8366758, 9288026, 8235013, 11498101, 9723501, 6445497, 10908442, 9825039, 9143868, 2575024, 10134740, 12105938, 12418515, 10254023, 4445711, 11858652, 5129011, 9846877, 6289527, 3544887, 11600208, 8911558, 10600926, 10604255, 8935612, 7205397, 10280586, 7885511, 10395327, 10352610, 8805663, 5544763, 10079987, 10734241, 9283816, 8181700, 6528942, 2306481, 12884930, 10653194, 10733042, 6502765, 8165444, 8230578, 3758458, 8804395, 6963897, 9787503, 9970454, 3736289, 6288543, 9845795, 5736093, 6706559, 10724193, 3660820, 10783198, 11339000, 11152075, 5622103, 12257026, 8173725, 2714397, 10808345, 11601378, 9112472, 9711988, 10482521, 9456598, 10922821, 10222079, 7118721, 5112387, 6430834, 7818452, 9453362, 6284459, 12600075, 10544592, 7671562, 6961680, 10136388, 3541631, 7448329, 12647597, 9283918, 7750902, 9970068, 12003742, 8478550, 5021453, 9851743, 10290535, 7677317, 10489017, 4633907, 8394035, 5001658, 9590930, 11126471, 4634310, 8148993, 12644579, 7381710, 9580407, 8475164, 5522822, 8426743, 5623569, 6309307, 4585508]

MVmassivecrossers=[1572317, 3130295, 3640714, 4054522, 5036052, 5111718, 5112072, 5113441, 5352533, 5384168, 5456147, 5457844, 5559420, 5824148, 5941984, 6367439, 6698421, 7351508, 7681202, 7686577, 8165094, 8620872, 9456242, 9575821, 9579357, 9881708, 10000162, 10096476, 11036477, 11519405, 11910146, 6129632, 8149637, 9164187, 9589369, 9773821, 10547905, 11122261]

d6791=[2155220, 2297349, 2297357, 2297384, 2297529, 2297785, 2297793, 2297825, 2297952, 2298436, 2435987, 2436097, 2436209, 2436324, 2436332, 2436417, 2436458, 2436540, 2436593, 2436676, 2436688, 2436732, 2436759, 2436814, 2436818, 2436824, 2436884, 2436900, 2436912, 2436944, 2436954, 2437040, 2437164, 2437103, 2437171, 2437191, 2437209, 2437240, 2437270, 2437325, 2437340, 2437353, 2437394, 2437402, 2437444, 2437488, 2437496, 2437507, 2437564, 2437589, 2437653, 2437692, 2437698, 2437781, 2437804, 2437805, 2437816, 2437851, 2437933, 2437957, 2437965, 2437972, 2437976, 2437987, 2438038, 2438051, 2438140, 2438264, 2438289, 2438333, 2438368, 2438421, 2438462, 2438513, 2439140, 2439233, 2568519, 2568547, 2568563, 2568654, 2568888, 2568912, 2568916, 2569055, 2569078, 2569126, 2569137, 2569204, 2569360, 2569488, 2569516, 2569618, 2569639, 2569891, 2569935, 2569945, 2570032, 2570094, 2570172, 2570214, 2570244, 2570370, 2570384, 2570518, 2570578, 2570696, 2570715, 2571093, 2571106, 2571164, 2571238, 2571323, 2707109, 2707312, 2707336, 2707478, 2707490, 2707526, 2707716, 2708001, 2708156, 2708172, 2708270]
d6819=[4935950, 4936335, 4936438, 4936463, 4936825, 4937011, 4937056, 4937204, 4937257, 4937327, 4937487, 4937576, 4937770, 4937775, 4937784, 4938090, 5023097, 5023275, 5023353, 5023379, 5023732, 5023845, 5023889, 5023931, 5023953, 5024043, 5024143, 5024240, 5024268, 5024272, 5024297, 5024312, 5024322, 5024327, 5024404, 5024405, 5024414, 5024456, 5024476, 5024512, 5024517, 5024582, 5024583, 5024601, 5024699, 5024750, 5024851, 5024967, 5025021, 5025101, 5025162, 5025172, 5025267, 5025294, 5025472, 5025632, 5025895, 5026008, 5111300, 5111413, 5111655, 5111718, 5111940, 5111949, 5112072, 5112118, 5112281, 5112288, 5112361, 5112373, 5112387, 5112401, 5112403, 5112438, 5112467, 5112481, 5112491, 5112730, 5112734, 5112744, 5112751, 5112786, 5112880, 5112938, 5112948, 5112950, 5112974, 5113041, 5113061, 5113228, 5113441, 5113526, 5113910, 5199426, 5199437, 5199439, 5199605, 5199859, 5199906, 5199930, 5200056, 5200152, 5200475, 5200629, 5200695, 5200787, 5287551]
d6811=[9534041, 9532379, 9532710, 9593804, 9593820, 9594460, 9594684, 9594744, 9594992, 9654644, 9654875, 9654981, 9655101, 9655167, 9655200, 9655459, 9655519, 9655559, 9656127, 9715600, 9715831, 9716028, 9716045, 9716081, 9716090, 9716430, 9716522, 9716554, 9716609, 9716722, 9716866, 9716885, 9716994, 9717214, 9775927, 9776236, 9776466, 9776739, 9777088, 9777108, 9777198, 9777246, 9777479, 9777536]

GO1=[11181828, 10785390, 11181345, 11234533, 10587397, 11393869, 7341231, 2016706, 3234703, 4060545, 11571396, 11565158, 11197101, 11250788, 11717120, 12017985, 9589140, 11414707, 11146230, 11412190, 11038023, 11566038, 11563791, 11968749, 7465993, 7382407, 6963897, 7378357, 9696716, 9576189, 10255401, 10319045, 9872108, 10256752, 11136421, 7889000, 8364751, 8491147, 8427273, 8094277, 9339711, 11181428, 11072852, 11339247, 11018203, 11653285, 11446280, 11554998, 10799049, 5962031, 7204369, 6948524, 6611219, 7019203, 7740188, 6935850, 3742673, 3539897, 2847821, 9455731, 9145952, 7941402, 11905937, 11551427, 12301350, 12253381, 11718466, 11358429, 11410398, 4137612, 3831651, 3427257, 4345370, 4345388, 4347646, 3834786, 4346319, 10737052, 11563747, 11289852, 11497494, 3339871, 3114149, 2983341, 3112163, 2708945, 7022217, 6595176, 7429237, 6590367, 7515243, 7430892, 10536773, 11244918, 10795477, 11191031, 6608968, 5964634, 6126168, 6607295, 6045141, 6126628, 5960552, 6522125, 6129293, 5985073, 2847437, 5617601, 3532685, 4668978, 3869445, 6279696, 2569126, 4381217, 4483471, 6221411, 5119480, 5614021, 4465279, 4078789, 6060150, 9368427, 6380450, 3346414, 2835473, 6144766, 4946220, 5623720, 8197719, 8264549, 8264592, 8264006, 8265098, 8330598, 8264079, 9716385, 9594684, 9532903, 9409513, 9532030, 9532518, 9470276, 9836221, 9838483, 9896174, 9897838, 9775516, 9776739, 9777798, 9595822, 9655200, 9716430, 9654907, 9716045, 9593997, 9716081, 5566500, 7470631, 5008719, 9028415, 4551712, 5306850, 5556256, 2018739, 8780557, 8718352, 8397817, 6384264, 5470969, 7022588, 4655790, 9650048, 6470683, 5809932, 2987385, 4466520, 4999858, 5219922, 9428908, 8645213, 10339105, 6365513, 8915499, 6059927, 8328936, 8766352, 4945391, 5219998, 8649781, 8391766, 7976424, 8916132, 9049302, 9595264, 4950312, 6307920, 5127940, 9430155, 5471962, 8718274, 8195488, 8195528, 8390399, 7622473, 8181280, 4951072, 4857585, 5730593, 8719108, 8985246, 8325270, 8655465, 8461591, 6066204, 5122468, 9489201, 8322611, 8459156, 8985207, 6063615, 5983251, 7220912, 8913111, 9305262, 6385534, 8128806, 8129102, 5470773, 5385183, 8915481, 8590368, 6763082, 8844362, 8984984, 8848115, 4863093, 8905023, 8123657, 7222334, 5988842, 5735283, 8128728, 6390357, 9369508, 5895751, 5209216, 5724222, 10452126, 8655156, 8462113, 8397700, 5385750, 5039076, 9178059, 6145968, 6386795, 4944840, 6803706, 8456818, 7551610, 9108401, 4945236, 8940728, 8121523, 4861623, 5899637, 9236769, 11122913, 8461876, 8460569, 5128272, 9048555, 8719476, 8331904, 8843835, 8707850, 5299028, 5032701, 8779107, 6386908, 5478781, 5481741, 5734154, 8776260, 7213690, 4858679, 5300993, 4947897, 8782589, 5216733, 8325630, 5034789, 9177726, 8123810, 8836219, 8191815, 8915951, 8192188, 8258012, 8783007, 4858251, 5033293, 8056828, 6887849, 11351036, 5894881, 7132015, 8906338, 4947105, 8125993, 9489078, 9051516, 8394047, 8581646, 6462455, 5980287, 8516761, 7659018, 8525251, 8123200, 5130101, 8973114, 7548838, 8454772, 6070750, 8178238, 6391344, 5985218, 8719209, 5217007, 4858299, 9364590, 8845361, 8258413, 8395097, 5213459, 9451931, 9302972, 8526677, 5395763, 11514511, 5724692, 6879549, 4829153, 8175133, 5566956, 9289861, 4775208, 4863289, 6308030, 4946997, 6062367, 9045876, 8456004, 8839730, 6464713, 8905921, 5397291, 4640527, 5303251, 8776159, 8978053, 8367765, 3649870, 9514751, 5219986, 7060413, 6470734, 5039087, 9240767, 5208211, 8191642, 8260621, 9114414, 10341001, 8643811, 8389696, 5033057, 5303930, 1160986, 7135279, 9047061, 7617101, 3431506, 7809297, 4060319, 6313922, 9303109, 9109546, 4772647, 6382801, 6067695, 5737930, 8265141, 7531650, 8523271, 9292059, 9778826, 8260055, 9886335, 4681628, 9307415, 9307591, 6888396, 6516631, 6060688, 1161965, 6785306, 8255951, 1434591, 2422539, 3341261, 4756864, 4824292, 5021305, 5182451, 5184472, 5281249, 5512584, 5769191, 5892704, 6025108, 6286466, 6370104, 6849670, 6871672, 6966770, 7587506, 7699331, 7739645, 8114988, 8580394, 9535637, 9579778, 9783807, 10089773, 10157826, 10262841, 10383777, 10658378, 10658947, 10681717, 10723766, 10935662, 10976252, 10976775, 10978008, 10990861, 11493683, 11546335, 11768249, 12645224, 5088362, 5787509, 9771905, 1433593, 1864855, 2424822, 2573092, 3120486, 3120585, 3443483, 3530520, 4140726, 4818830, 5008996, 5426041, 5430779, 5709667, 5903484, 6451238, 6805631, 6853465, 6929729, 7513379, 7626457, 7831348, 7935931, 8086192, 8396782, 8415501, 8748278, 8771414, 8909673, 9002344, 9072262, 9115334, 9351617, 9589638, 9650046, 9650527, 9761597, 1294122, 1294385, 1870196, 1872210, 2140446, 2155869, 2167774, 2283075, 2303200, 2310129, 2422635, 3343931, 3348070, 3432732, 3532734, 3744681, 3837107, 3849527, 3936047, 3941607, 4149966, 4357170, 4633131, 4814198, 4948344, 4948479, 5003625, 5010165, 5176709, 5219637, 5300269, 5347736, 5359600, 5397058, 5443651, 5443741, 5468161, 5480957, 5613241, 5645576, 5736093, 5739098, 5785268, 5793427, 5816923, 5860093, 5956977, 5962451, 6142229, 6210603, 6232914, 6280589, 6303699, 6347338, 6447552, 6706559, 6706980, 6757332, 6775098, 6950976, 6953271, 7104797, 7305252, 7367400, 7428217, 7435143, 7449159, 7465477, 7501516, 7515137, 7531119, 7531332, 7543102, 7543694, 7622273, 7708681, 7744204, 7746983, 7877451, 7880893, 7955078, 7975276, 8046439, 8111705, 8112523, 8123432, 8124622, 8126531, 8142943, 8145590, 8167335, 8256020, 8258630, 8293291, 8314240, 8328668, 8394035, 8416447, 8424298, 8612241, 8612481, 8648671, 8694070, 8738333, 8738537, 8836830, 9001643, 9002805, 9176522, 9210256, 9279486, 9304549, 9353950, 9474201, 9657917, 9880563, 9883123, 3529597, 3937022, 4036007, 5622780, 5733555, 6309488, 6610354, 6689398, 6777888, 6791445, 8094602, 8824452, 9028697, 9612990, 2140561, 2157901, 2164123, 2285032, 2447529, 2852961, 3099019, 3216467, 3220837, 3336731, 3642422, 3643447, 3937217, 4045066, 4826087, 4826170, 4857853, 4915774, 4918371, 5003335, 5094714, 5123659, 5172478, 5262944, 5262973, 5264655, 5351254, 5439339, 5471548, 5531278, 5559520, 5610200, 5695112, 5707560, 5780142, 5808398, 6032639, 6056972, 6131884, 6139471, 6221548, 6371980, 6425652, 6430534, 6431673, 6545726, 6590381, 6627543, 6676083, 6678328, 6705259, 6751876, 6791309, 6967600, 7032442, 7103951, 7108646, 7190400, 7205397, 7217486, 7217665, 7375177, 7431665, 7703954, 7757382, 7847644, 7890365, 7901207, 7907191, 8085964, 8126282, 8247851, 8325764, 8343854, 8365052, 8365782, 8378545, 8386537, 8389200, 8430105, 8480313, 8483464, 8496527, 8669014, 8805573, 8825444, 8879518, 8913420, 9163796, 9164187, 9211482, 9412305, 9469165, 9513046, 9518802, 9589369, 9632233, 9649776, 9704246, 9765062, 9832790, 9881628, 1027337, 1865747, 1872469, 2301349, 2693967, 3426898, 3545033, 3958725, 4644949, 4645513, 4912124, 5129971, 5183325, 5380775, 6045509, 6060867, 6106023, 6128314, 6188269, 6207320, 6211965, 6352802, 6615504, 6681565, 6804138, 7024001, 7036099, 7178106, 7264736, 7283405, 7445517, 7457184, 7502157, 7610636, 7617399, 7618122, 7749249, 7831636, 7941728, 7950550, 7983221, 8175678, 8176259, 8176893, 8195153, 8299922, 8307149, 8428095, 8431695, 8490454, 8522050, 8555599, 8590920, 8675106, 8752893, 8879369, 8958065, 9003765, 9229592, 9292208, 9405221, 9456506, 9475300, 9595924, 9650172, 9772366, 9877891, 9932866, 9946074, 1872375, 3115946, 4736611, 5308777, 5480123, 5534910, 6424157, 6688318, 6851401, 7351098, 8420954, 9244091, 9427247, 9673317, 9825039, 1026326, 1430985, 1433803, 1569842, 1719422, 1723752, 1723843, 1726291, 1867706, 1996078, 1996415, 2011891, 2016978, 2018537, 2018585, 2141255, 2157650, 2161831, 2164379, 2283721, 2285827, 2303101, 2305479, 2305992, 2422558, 2442483, 2443903, 2447476, 2449558, 2451509, 2579661, 2583386, 2584477, 2584478, 2696732, 2696739, 2714785, 2835067, 2835657, 2846659, 2971432, 2972545, 2972876, 2998532, 3097819, 3098179, 3111815, 3113648, 3119555, 3123653, 3218312, 3221086, 3222740, 3222834, 3238303, 3326392, 3337536, 3343630, 3346725, 3347431, 3426673, 3428530, 3430674, 3432802, 3439353, 3441207, 3529399, 3530333, 3531436, 3532085, 3533464, 3539429, 3546046, 3547041, 3641504, 3645589, 3647215, 3648674, 3733028, 3735912, 3749487, 3833819, 3837488, 3839294, 3938291, 3942701, 4048951, 4054771, 4055294, 4056365, 4056579, 4137210, 4261269, 4262252, 4348513, 4350501, 4355057, 4356490, 4367337, 4446215, 4466582, 4489185, 4540698, 4555734, 4586817, 4645474, 4678118, 4680912, 4729920, 4731118, 4732137, 4774298, 4818593, 4826423, 4829682, 4833377, 4857279, 4902442, 4904166, 4912918, 4920600, 4946632, 4952516, 4989477, 4991732, 4995788, 5000089, 5002732, 5003442, 5003549, 5034206, 5035304, 5040851, 5042295, 5083205, 5129236, 5166068, 5176520, 5180345, 5206349, 5208343, 5211724, 5214140, 5215099, 5215820, 5252534, 5255835, 5265226, 5266369, 5295280, 5302674, 5303905, 5306751, 5340189, 5340720, 5343338, 5343454, 5345094, 5350163, 5390372, 5393453, 5440198, 5450937, 5470218, 5472717, 5472964, 5479483, 5513434, 5514079, 5522071, 5522575, 5525484, 5552283, 5556743, 5560101, 5562995, 5564922, 5565067, 5602062, 5610212, 5613099, 5616851, 5620636, 5623444, 5637392, 5645845, 5653970, 5685237, 5693454, 5694017, 5696539, 5697980, 5698093, 5706724, 5707115, 5773973, 5774568, 5780614, 5791045, 5812955, 5820359, 5856737, 5857618, 5858947, 5867450, 5876943, 5881079, 5894271, 5899642, 5905907, 5953450, 5954815, 5967194, 5981249, 6025641, 6029474, 6033938, 6034166, 6044054, 6058104, 6058941, 6061867, 6063745, 6100524, 6101471, 6104786, 6114108, 6116517, 6117196, 6118670, 6119774, 6126808, 6128327, 6128903, 6185317, 6191190, 6200178, 6207510, 6212708, 6212838, 6228590, 6231096, 6262579, 6271966, 6276645, 6289002, 6304676, 6304807, 6309862, 6341990, 6347518, 6350696, 6356581, 6358695, 6359454, 6359890, 6360104, 6365511, 6369548, 6380975, 6381328, 6391933, 6428602, 6435542, 6435786, 6437547, 6441442, 6443407, 6467408, 6467788, 6469446, 6502800, 6521522, 6535400, 6579495, 6584555, 6592034, 6612102, 6619837, 6630816, 6633766, 6665058, 6676597, 6678433, 6678472, 6690139, 6696387, 6707195, 6752116, 6757558, 6764026, 6764685, 6767165, 6774693, 6776396, 6781023, 6786075, 6786177, 6837573, 6842204, 6859803, 6860649, 6863899, 6875474, 6876162, 6924105, 6925109, 6925158, 6928997, 6936091, 6937017, 6945941, 6946219, 6947706, 6949009, 6950753, 6953912, 6962291, 6975038, 7009245, 7018212, 7018515, 7025935, 7041245, 7042021, 7042040, 7049467, 7049771, 7060732, 7092127, 7107419, 7121674, 7122640, 7131794, 7174636, 7175826, 7178170, 7185001, 7188662, 7189418, 7198587, 7204026, 7218915, 7255313, 7257241, 7258771, 7259237, 7265189, 7267119, 7270385, 7288241, 7295725, 7297940, 7345128, 7348314, 7350897, 7353997, 7368013, 7375225, 7376259, 7376659, 7387808, 7446296, 7446648, 7449151, 7468893, 7501667, 7501722, 7516156, 7518143, 7518352, 7523164, 7529215, 7530849, 7533995, 7546098, 7550955, 7581214, 7581822, 7591451, 7604896, 7610274, 7611069, 7612755, 7617227, 7619745, 7619946, 7621561, 7621593, 7624334, 7629559, 7630743, 7674224, 7679756, 7685657, 7687390, 7691952, 7698688, 7728945, 7728958, 7730215, 7733619, 7741472, 7747495, 7761336, 7762104, 7762794, 7777395, 7778197, 7798570, 7799904, 7809050, 7810676, 7818152, 7830749, 7832489, 7836711, 7838475, 7849791, 7871690, 7878388, 7880417, 7903173, 7903576, 7937449, 7957377, 7957918, 7969053, 7976006, 7976673, 7983015, 7983431, 7983470, 7985382, 7985438, 8004637, 8004863, 8007218, 8007458, 8017898, 8026963, 8028908, 8039063, 8040267, 8042126, 8043596, 8053949, 8054055, 8055108, 8057047, 8058062, 8073887, 8077790, 8087067, 8098590, 8098608, 8107079, 8108732, 8115488, 8127582, 8142438, 8144467, 8154682, 8154693, 8158382, 8161789, 8165094, 8172679, 8175027, 8188772, 8192892, 8219022, 8222944, 8223463, 8228880, 8233775, 8235144, 8235991, 8259226, 8264074, 8277879, 8283356, 8299489, 8301905, 8309466, 8312512, 8315796, 8316412, 8323295, 8327201, 8360297, 8362623, 8366239, 8391175, 8391545, 8418309, 8420916, 8423708, 8426672, 8432800, 8440248, 8451486, 8453896, 8458124, 8458954, 8475025, 8480097, 8499557, 8505072, 8506816, 8507484, 8510560, 8518198, 8518881, 8524315, 8526691, 8538793, 8540034, 8543569, 8545504, 8560280, 8564157, 8564966, 8564976, 8573846, 8574234, 8579095, 8583313, 8605197, 8607365, 8609482, 8611394, 8612480, 8613617, 8618934, 8619145, 8620380, 8620872, 8623565, 8628607, 8630587, 8636389, 8653471, 8671812, 8674172, 8678638, 8684542, 8684860, 8686904, 8688421, 8694617, 8702709, 8742229, 8742545, 8742912, 8747442, 8750187, 8754274, 8760372, 8766846, 8813618, 8815404, 8817343, 8827853, 8838230, 8840992, 8866860, 8869611, 8879938, 8893087, 8914107, 8936347, 8953164, 8957693, 8957944, 8959259, 8960083, 8962109, 8973815, 8981783, 8981846, 8984355, 9004818, 9018909, 9031549, 9031798, 9049147, 9071153, 9074137, 9075872, 9077633, 9086187, 9086216, 9092209, 9100548, 9109244, 9119915, 9145861, 9146372, 9152245, 9161451, 9163153, 9164696, 9202597, 9205419, 9209366, 9214512, 9215910, 9225869, 9225958, 9227589, 9228469, 9267654, 9269234, 9269772, 9273251, 9273827, 9286266, 9305599, 9308007, 9326421, 9335518, 9340325, 9368745, 9385972, 9388523, 9391954, 9402439, 9405867, 9408183, 9426610, 9427899, 9455446, 9457108, 9457533, 9463398, 9472076, 9486819, 9512519, 9512635, 9513889, 9514277, 9521171, 9529813, 9531084, 9534288, 9534802, 9534964, 9550045, 9551807, 9569162, 9574650, 9575847, 9597653, 9635649, 9642805, 9652704, 9692431, 9698133, 9712445, 9712824, 9713617, 9753097, 9754133, 9760514, 9763796, 9767815, 9777479, 9778887, 9811950, 9812507, 9813963, 9818288, 9824343, 9824874, 9881708, 9882316, 9887609, 9932463, 9936015, 9941141, 9956345, 9992866, 7585122, 8197210, 7869334, 9491316, 8543200, 6923677, 3634720, 9957219, 4346893, 9335570, 9960005, 3241374, 3946270, 7743539, 8738834, 6863017, 8213984, 9008270, 8284510, 2858440, 5183935, 6785523, 7906186, 8611114, 7902578, 5097690, 7117050, 6128428, 6287950, 7530451, 9412408, 9521461, 8175438, 6955286, 8759811, 8006058, 8181700, 7465221, 8540384, 9597214, 8120076, 9451999, 6418912, 9147335, 3751222, 6047683, 9112472, 5129011, 5620596, 3748691, 9332840, 7766103, 7191945, 2554924, 7821234, 6528942, 7691148, 4914234, 5526083, 9392039, 4457395, 5436082, 7366321, 2719113, 5563915, 6952430, 5361169, 8826496, 6936990, 9942816, 5794100, 3838075, 8145176, 3348134, 9020419, 7366820, 3951839, 6200565, 2448679, 7594865, 3099949, 8630006, 9833091, 7685316, 7685039, 7363357, 9704258, 7808791, 8074326, 6516242, 9025216, 9513787, 9658958, 9942071, 3642135, 2714090, 6363338, 8947422, 7808930, 4455785, 3958463, 6445497, 3342658, 3544637, 6356038, 8506096, 7267370, 4356964, 9159375, 5702382, 8364578, 9268083, 6530242, 9352513, 5006206, 3232813, 9087870, 6048862, 3850744, 5623569, 7348442, 6289573, 6350918, 5098145, 9777902, 9100438, 3544887, 7871897, 3242122, 7101244, 7939118, 9033281, 2165615, 6510447, 3236108, 5962470, 3951748, 6613293, 3728936, 9217018, 6603506, 3541061, 6286502, 3629335, 5219787, 6448098, 9009295, 7272332, 1725190, 2305145, 2449518, 2860010, 3116604, 3235616, 3750783, 3855126, 3954770, 5042253, 5184199, 5219779, 5733975, 5866138, 6071633, 6383953, 6546755, 6620367, 6664431, 6752140, 6877290, 6960601, 7430104, 7551643, 7837954, 7940675, 8145311, 8230578, 8298507, 8307548, 8366262, 8378653, 8391532, 8423171, 8462934, 8619322, 8624155, 9075225, 9244428, 9330460, 9349632, 9353187, 9488603, 9580043, 9581445, 9589500, 9692529, 9835713, 9836930, 6343222, 4814689, 5254812, 5937398, 5428360, 5940068, 5342486, 5940587, 5196152, 3756174, 4283451, 5461921, 5344943, 4168909, 4570555, 5016549, 5105190, 1576469, 3847071, 2013502, 4056266, 2988638, 3860176, 9517698, 4141815, 9760904, 9641484, 3942203, 3736289, 3217051, 2449703, 1868101, 4640537, 4448636, 4039306, 9700899, 5084662, 3631402, 3425476, 9945290, 4249128, 9456598, 2697501, 2993958, 2854297]
Teffoutlier=[11289128, 6583850, 11802037, 8936084, 5771513, 7191496, 12017985, 11181891, 11018922, 11775041, 5944493, 4569691, 11752358, 9946074, 7265189, 10908322, 10554179, 4903283, 10524715, 11508970, 9946773, 10198347, 8479780, 10592924, 11905840, 11090673, 6343543, 11287679, 6422994, 11868264, 9650527, 10228836]

vsiniboxoutlier=[11129153, 11289128, 11597759, 2305930, 10735077, 10723388, 8479383, 3937217, 7592262, 5430086, 11497421, 12003253, 10417308, 5774861, 11752118, 4548564, 6757332, 5461921, 9267654, 4995788, 4638317, 11775041, 8479182, 5288716, 6501676, 4818830, 4818420, 11753439, 5287610, 12216750, 9574650, 6584555, 9390558, 4637793, 10198347, 10592924, 11043208, 8154383, 5105190, 3339894, 11873200, 12070114, 5112387, 6501237, 2854297, 12367827, 10128629, 4937056, 5111949, 4446405, 6585816, 5112072, 5112734, 5023953, 5193840, 5374118, 11551628, 10146348, 9662395, 12365293]

vsiniboxoutlier2=[11129153, 11289128, 11597759, 2305930, 10735077, 10723388, 8479383, 3937217, 5430086, 11497421, 12003253, 10417308, 5774861, 6757332, 9267654, 4638317, 11775041, 8479182, 4818830, 9390558, 4637793, 10198347, 10592924, 3339894, 5112387, 6501237, 2854297, 12367827, 10128629, 4937056, 5111949, 4446405, 6585816, 5112072, 5193840]

fast2=[11497421, 11597759, 12003253, 10293335, 10417308, 2285032, 2833697, 3937217, 2305930, 3955867, 4473933, 5193386, 9469165, 11289128]

allvsiniweird=[11129153, 11289128, 11597759, 2305930, 10735077, 10723388, 8479383, 3937217, 5430086, 11497421, 12003253, 10417308, 5774861, 9267654, 11775041, 8479182, 4818830, 9390558, 4637793, 10198347, 3339894, 5112387, 6501237, 2854297, 12367827, 10128629, 4937056, 5111949, 4446405, 6585816, 5112072, 5193840, 10293335, 2285032, 2833697, 3955867, 4473933, 5193386, 9469165]

rafaspots=[2837475, 3223000, 3424541, 3427720, 3430893, 3632418, 3633889, 3733735, 3735871, 3942719, 3967430, 4446300, 4450844, 4543171, 4638884, 5084157, 5344612, 5429911, 5431807, 5516982, 5689219, 5773155, 5773345, 6268607, 6508366, 6587236, 6592305, 6679371, 6766513, 6853020, 6933899, 7019341, 7103006, 7266484, 7271556, 7591963, 7668623, 8016496, 8018599, 8019508, 8216936, 8289241, 8349736, 8414062, 8416311, 8677016, 8737094, 8956017, 9025370, 9073645, 9093289, 9098294, 9138680, 9163769, 9202077, 9209245, 9225600, 9226926, 9273544, 9287845, 9289275, 9292130, 9328372, 9335972, 9390670, 9394953, 9410862, 9414417, 9457728, 9468847, 9512063, 9579208, 9644337, 9696358, 9697131, 9702369, 9788260, 9791157, 9821513, 9880787, 9893470, 9908400, 10003270, 10016239, 10024648, 10025841, 10079226, 10081026, 10083309, 10129349, 10147635, 10162436, 10202294, 10214328, 10215584, 10295224, 10355856, 10462940, 10593351, 10610027, 10655953, 10717090, 10727922, 10731424, 10732098, 10794845, 10909629, 10923629, 10963065, 10971974, 10972252, 11026764, 11070918, 11193681, 11253226, 11401708, 11414712, 11771760]

gyrosample=[3427720, 3632418, 3656476, 5184732, 5866724, 6116048, 6196457, 6521045, 7680114, 7871531, 8006161, 8228742, 8349582, 9098294, 9139151, 9592705, 9955598, 10454113, 10586004, 10644253, 10963065, 11244118, 11401755, 11807274, 12258514] 

CorsaroRC=[2297384, 2297825, 2436417, 2436732, 2436912, 2436944, 2437353, 2437564, 2437103, 2437698, 2437804, 2437805, 2437987, 2438051, 2568916, 2569055, 2569488, 2569945, 2570214, 4937056, 5023953, 5024043, 5024327, 5024414, 5024476, 5024582, 5024601, 5024967, 5111949, 5112288, 5112373, 5112387, 5112401, 5112467, 5112491, 5112730, 5112751, 5112938, 5112950, 5112974, 5200152, 5024404, 9534041, 9655101, 9655167, 9716090, 9716522]

Corsaro6811=[9534041, 9655101, 9655167, 9716090, 9716522]

Corsaro6819=[4937056, 4937576, 4937770, 5023732, 5023845, 5023931, 5023953, 5024043, 5024143, 5024240, 5024297, 5024312, 5024327, 5024404, 5024405, 5024414, 5024476, 5024512, 5024517, 5024582, 5024583, 5024601, 5024750, 5024851, 5024967, 5111718, 5111940, 5111949, 5112072, 5112288, 5112361, 5112373, 5112387, 5112401, 5112403, 5112467, 5112481, 5112491, 5112730, 5112734, 5112744, 5112786, 5112880, 5112938, 5112948, 5112950, 5112974, 5113041, 5113441, 5200152]

Corsaro6791=[2297384, 2297825, 2435987, 2436097, 2436209, 2436332, 2436417, 2436458, 2436540, 2436593, 2436676, 2436688, 2436732, 2436759, 2436814, 2436818, 2436824, 2436900, 2436912, 2437040, 2437103, 2437240, 2437270, 2437325, 2437340, 2437353, 2437394, 2437402, 2437444, 2437488, 2437496, 2437507, 2437564, 2437589, 2437653, 2437698, 2437781, 2437804, 2437805, 2437816, 2437933, 2437957, 2437965, 2437972, 2437976, 2437987, 2438038, 2438051, 2438140, 2438333, 2569055, 2569360, 2569618, 2569935, 2569945, 2570094, 2570172, 2570244, 2570384, 2570518]

medalphaM=[11394905, 11601529, 11445818, 11753104, 11752358, 11823838, 11509608, 9821622, 9761625, 10202184, 10525475, 8547669, 9269081, 9718024, 7019157, 7670489, 5339823, 5855568, 5512910, 6423690, 3528656, 4143460, 4350501, 3833399, 2570715, 4378473, 3455760]
;published stars below

newalphaM=[9821622, 4143460, 4350501, 11394905, 9269081, 11823838,5512910, 10525475, 9002884, 9761625, 11445818,3455760, 8547669,3833399 ]

newboxoutlier=[2305930, 2854297, 3098716, 3339894, 3937217, 3956513, 4348593, 4446405, 4545474, 4637793, 4818830, 4908025, 4937056, 5111949, 5112072, 5112387, 5112734, 5113910, 5193840, 5287610, 5461921, 5774861, 6425652, 6501237, 6583850, 6585816, 6587865, 8017159, 8479182, 8479383, 9267654, 9390558, 9469165, 9596106, 10128629, 10198347, 10293335, 10331610, 10417308, 10527661, 10656124, 10723388, 10735077, 11129153, 11133969, 11289128, 11341723, 11497421, 11597759, 11753439, 11775041, 11971166, 12003253, 12070114, 12117099, 12367827]

vsiniweirdvetted=[3098716, 3339894, 4818830, 4937056, 5111949, 5112387, 5193840, 5774861, 6585816, 6587865,  8479182, 8479383, 9267654, 9390558, 9596106, 10128629, 10527661, 10723388, 10735077, 11129153, 11341723, 11775041, 12117099, 12367827,11497421, 11597759, 12003253, 10293335, 10417308, 2285032, 2833697, 3937217, 2305930, 3955867, 4473933, 5193386, 9469165, 11289128]

vsiniweirdsigma=[3098716, 4637793, 4937056, 5774861, 6501237, 8479182, 9390558, 10128629, 10198347, 11129153, 11775041, 12367827, 2285032, 2305930, 2833697, 3937217, 3955867, 4473933, 5193386, 9469165, 10293335, 10417308, 11289128, 11497421, 11597759, 12003253]

yvonnelowz=[1161618,1163621,1433730,1435573,1719297,1725552,1865595,1865747,2017541,2018392, 2141928,2283093,2303414,2309469,2422073,2425631,2444348,2695975,2709877,3216638,3235616,3346501,3646933,3658136,3936047, 3952315,3955590,4039831,4143467,4157282,4243803, 4771707,5009376,5112481,5184073,5698156,6279038,6604237,6611219,6924105,7367289,7693833,8094277,8350894,8476245,8495124, 9151007,9335536,9339711,9637337,9696716,10083815, 10319045,10329008,10785390,10864433,11072164,11445495,11651457,12111110,12207740,12553757]

Enricostars=[3744043, 6117517, 6144777, 7060732, 7619745, 8366239, 8475025, 8718745, 9145955, 9267654, 9475697, 9882316, 10123207, 10200377, 10257278, 11353313, 11913545, 11968334, 12008916]

Jasonpulse=[4465403, 5630494, 7685485, 5952417, 8246744, 8707758, 7620739, 6139295, 7467076, 4661844, 6279284, 7595223, 9590213, 8580178, 5096805, 4171238, 3729981, 9016039, 8355866, 7751249, 7668077, 6522027, 6696719, 7517640, 6530559, 6124552, 8292900, 7364349, 5950897, 6035807, 5089044, 4375039, 3444020, 4271591] 

supressedl2=[11072164,11651457,12553757 ]

Deh15=[8962923,5184199,4659821,3744681,7467630,9346602,7581399]

lowZweird=[3235616,3955590,7693833,9151007,9696716,11072164,11651457,12553757]

origlowZ=[10974053, 6279038, 7693833, 7341231, 8222179, 11393869, 7881304, 10255401, 6604237, 11181345, 10334458, 4137612, 11244918, 4345388, 6448764, 10329008, 9589140, 10453271, 9872108, 9576189, 9339711, 10133590, 9335536, 9696716, 7429237, 7612547, 4143467, 11122913, 9333250, 10783631, 5184073, 5009376, 8427273, 8555166, 8162514, 8476245, 5698156, 10785390, 8719108, 10864433, 11403325, 9451931, 6611219, 10256752, 6924105, 10452126, 9637337, 12207740, 8094277, 8940728, 10799049, 12111110, 9391582, 3952315, 8350894, 10319045, 10398120, 7367289, 11072164, 10083815, 12553757, 7659018, 8495124, 3860823, 11651457, 9151007, 11445495]

delnureject=[1433593, 2156178, 2283093, 2285898, 2303367, 2424822, 2437804, 2438051, 2444790, 2449020, 2449327, 2557942, 2568654, 2568888, 2569945, 2570384, 2573092, 2696628, 2845408, 3116604, 3118806, 3120585, 3122548, 3343931, 3348134, 3356438, 3425675, 3428447, 3456313, 3459109, 3530823, 3532985, 3541061, 3544987, 3660820, 3729141, 3750783, 3832147, 3855003, 3858850, 3936921, 3953330, 3969841, 4056994, 4075610, 4077835, 4136374, 4245297, 4262667, 4284581, 4348593, 4374169, 4446405, 4459408, 4478281, 4555699, 4661299, 4663185, 4663623, 4814198, 4920997, 4930018, 4933782, 4951617, 5094833, 5098145, 5111300, 5126724, 5167473, 5175152, 5285357, 5300269, 5352699, 5383275, 5430086, 5471396, 5511566, 5535029, 5565654, 5629783, 5640843, 5772710, 5787509, 5793628, 5808438, 5879112, 5891971, 5985218, 6067987, 6131884, 6148227, 6220899, 6289417, 6311997, 6343543, 6344499, 6356038, 6382830, 6462755, 6468112, 6509721, 6587345, 6612644, 6701238, 6707691, 6853266, 6863017, 7007173, 7102491, 7108536, 7205067, 7265649, 7379100, 7384966, 7421138, 7440490, 7440589, 7594865, 7669105, 7671562, 7677317, 7679799, 7798339, 7808227, 7810708, 7816294, 7880664, 7949258, 7967534, 8005116, 8081069, 8092097, 8219070, 8235013, 8255956, 8285712, 8293686, 8367834, 8378462, 8418437, 8456004, 8462775, 8491283, 8493827, 8505072, 8527188, 8558629, 8565159, 8591738, 8649099, 8673221, 8676094, 8696035, 8703041, 8738834, 8817365, 8825444, 8839028, 8936104, 8948403, 9021464, 9025447, 9029195, 9045025, 9071895, 9139970, 9151007, 9160995, 9210116, 9217018, 9217456, 9268197, 9287916, 9291830, 9326484, 9331202, 9339825, 9340114, 9350965, 9389234, 9406596, 9406638, 9409463, 9427889, 9475932, 9508395, 9508595, 9519609, 9532518, 9539910, 9541892, 9582089, 9595840, 9602917, 9643826, 9643914, 9644558, 9702841, 9724324, 9725292, 9771905, 9777088, 9777198, 9782817, 9786910, 9787503, 9814943, 9836930, 9843358, 9843754, 9846098, 9847159, 9847893, 9905526, 9946773, 9964206, 9966247, 9970068, 10015663, 10066568, 10082602, 10136256, 10156576, 10224535, 10289378, 10332753, 10339516, 10405445, 10489909, 10518222, 10553525, 10554179, 10618251, 10647684, 10656124, 10679090, 10735519, 10857953, 10902738, 10935753, 10936814, 11020885, 11038023, 11043872, 11072164, 11090673, 11136690, 11141358, 11145563, 11146230, 11289128, 11305377, 11339247, 11352756, 11361055, 11402359, 11408704, 11450315, 11456927, 11497421, 11502092, 11505872, 11617894, 11650219, 11651457, 11753010, 11954055, 12020466, 12055552, 12070114, 12117138, 12117920, 12204548, 12553757, 12647597]

numaxreject=[2164874, 2165450, 2167774, 2303367, 2437692, 2568563, 2568888, 2569945, 2570214, 2570384, 2572089, 2573092, 2845408, 2847821, 3118806, 3242233, 3356438, 3456313, 3458643, 3530823, 3532985, 3544987, 3660820, 3729884, 3733209, 3750783, 3759696, 3832147, 3855003, 3858714, 3858850, 3937075, 3953330, 3954766, 4056994, 4136374, 4249279, 4282111, 4366880, 4374169, 4446405, 4459408, 4547204, 4555699, 4641439, 4663185, 4663623, 4863289, 4904671, 4920997, 4930018, 4933782, 4951617, 5094833, 5098145, 5111300, 5126724, 5198142, 5219779, 5272843, 5300269, 5353108, 5393304, 5459563, 5535029, 5565654, 5629783, 5735779, 5736093, 5780142, 5793628, 5879112, 5956105, 5982708, 6131884, 6148227, 6210264, 6289417, 6311997, 6313922, 6382830, 6547176, 6612644, 6635892, 6701238, 6707691, 6762434, 6791309, 6939484, 7007173, 7132804, 7285830, 7345204, 7379100, 7384966, 7522091, 7591642, 7604896, 7612916, 7703954, 7741179, 7816294, 7880664, 7901972, 8092097, 8126282, 8192188, 8234394, 8255956, 8367834, 8454772, 8456004, 8462775, 8481765, 8491283, 8591738, 8649099, 8703041, 8817365, 8825444, 8984984, 9021464, 9029195, 9045025, 9210116, 9243306, 9335536, 9350965, 9389234, 9406638, 9409463, 9579999, 9582089, 9595840, 9655167, 9702841, 9725292, 9771905, 9782817, 9786910, 9787503, 9838510, 9846098, 9847159, 9946773, 9962849, 10082602, 10136256, 10207268, 10207623, 10224535, 10332753, 10360984, 10405445, 10415545, 10553525, 10647684, 10735519, 10788540, 10936814, 11037219, 11043872, 11072164, 11083319, 11090673, 11136690, 11140831, 11177729, 11242268, 11287896, 11409827, 11497421, 11502092, 11566089, 11616096, 11617751, 11617894, 11649869, 11753010, 11770790, 11871718, 11971166, 12011995, 12056072, 12117138, 12117920, 12157465, 12418504, 12688798, 12689506]

comparison1=[4860292, 8310792, 5598645, 11463411, 4756445, 6851401, 2158410, 9028221, 8085964, 4663478, 9645361, 10291535, 5943345, 3758731, 10272858, 9662395, 2845408, 8617169, 10724620, 5736841, 5026399, 7347189, 10935853, 11753166, 7044886, 9903915, 3936047]

comparisonoct=[11463411, 4756445, 8310792, 6851401, 2158410, 4381719, 9533861, 8328014, 9028221, 8085964, 6786398, 6756579, 10724620, 10288283, 10405377, 5736841, 9775927, 7384966, 5026399, 9662395, 8805663, 2845408, 5459287, 2972876, 11462629, 6960601, 3557606, 5219779]

real6819=[4937056, 4937576, 4937770, 5023732, 5023889, 5023953, 5024143, 5024268, 5024272, 5024404, 5024456, 5024476, 5024583, 5024601, 5024750, 5024851, 5111718, 5111940, 5111949, 5112072, 5112288, 5112361, 5112373, 5112387, 5112401, 5112467, 5112481, 5112491, 5112730, 5112734, 5112744, 5112786, 5112880, 5112938, 5112948, 5112950, 5112974, 5113041, 5113061, 5113441, 5199859, 5200152] ; from marcs photmetric list of dennis's stars

real6791=[2297384, 2297825, 2435987, 2436209, 2436417, 2436540, 2436688, 2436900, 2437040, 2437340, 2437353, 2437496, 2437507, 2437564, 2437804, 2437816, 2437965, 2438051, 2438333, 2569055, 2569360, 2569618, 2569935, 2569945, 2570172, 2570384, 2570518]

noseismo=[    10068490, 10264774, 10649021, 10736591,  2140561,  2164123,  2285032,  2568916,  2569935,  2997455,  3220837,  3338674,  3440230,  3449540,  3532985,  3848919,  3955867,  4045066,  4242873,  4260884,  4355160,  4677837,  4732015,  4771719,  4774429,  4826170,  4999260,  5004660,  5123145,  5123659,  5129882,  5216870,  5218014,  5385245,  5385778,  5467126,  5471548,  5476347,  5610200,  5620305,  5640750,  5731954,  5737282,  5808398,  5816671,  5986270,  6233558,  6431673,  6461675,  6464938,  6545726,  6591005,  6635778,  6676083,  6717417,  6934572,  7030715,  7031714,  7037405,  7287493,  7446011,  7465993,  7596350,  7612547,  7670875,  7690843,  7901207,  7957936,  8045286,  8057568,  8264549,  8264592,  8388399,  8410637,  8430105,  8453324,  8496527,  8515227,  8517303,  8646460,   8702921,8718273,8720055,  8747222,  8782636,  8870432,  8904619,  9181877,  9205419,  9210116,  9612084,  9705156,  9765062,  9824711,  9832790]

coresurface=[3744043, 6144777, 7060732, 7619745, 8366239, 8475025, 8718745, 9267654, 10257278, 11353313, 11913545,  11968334, 12008916, 6448890, 4448777, 11145123, 12508433, 8702606, 5689820, 8751420, 7799349, 9574283 ]

paulstars=[2158410, 2845408, 2972876, 3557606, 4381719, 4756445, 5026399, 5219779, 5459287, 5736841, 6756579, 6786398, 6851401, 6960601, 7384966, 8085964, 8310792, 8328014, 8805663, 9028221, 9533861, 9662395, 9775927, 10288283, 10405377, 10724620, 11462629, 11463411, 8414518, 8872979, 9002805, 9328682, 3557606, 8328014, 9028221, 8962923, 5184199, 4659821, 3744681, 7467630, 9346602, 7581399]

coleman=[1726211, 1726245, 2160901, 2449020, 2573092, 3356438, 3530823, 3546046, 3736251, 3858714, 3973137, 4043436, 4149966, 4164236, 4279165, 4374169, 4456739, 4555699, 4681356, 4830095, 5112950, 5462460, 5793628, 5985252, 6124426, 6185964, 6382801, 6451664, 6462755, 6468112, 6526377, 6610354, 6707691, 6716840, 6753216, 6929104, 6948654, 6952430, 7267370, 7272332, 7418275, 7447072, 7511777, 7596350, 7816294, 8092097, 8095225, 8462775, 8870432, 9008090, 9029195, 9146423, 9210116, 9541892, 9605626, 9763419, 9777198, 9851743, 9908646, 9969574, 10334585, 10384595, 10724041, 10855512, 10936814, 11140831, 11145672, 11177729, 11192141, 11287896, 11353223, 11400880, 11567797, 11663151, 11953849, 12003253, 12056767, 12067693, 12117920, 12645236, 12737382]

tanda=[2856412, 3532985, 3557606, 3750783, 4570555, 4678610, 5018155, 5215232, 5449910, 6123238, 6129632, 6627606, 6776494, 7214916, 7340724, 7449159, 7903173, 7976619, 8149014, 9452147, 9718692, 9771031,10007492,10088999,10322133, 10424379]

hottoofast=[8479182, 8649099, 10482198, 11966513, 5818064, 9843104, 10935853, 12157006, 4157276, 4937056, 6032639, 7747060, 7757382, 8247851, 8936339, 9086060, 9469212, 9898373, 10284955, 11020101, 4758020, 5109088, 5194072, 5731004, 6221548, 6627543, 8245912, 8329095, 8522971, 8648338] 


visualoutlierA3=[1434395, 1864258, 1872749, 2010051, 2015616, 2016492, 2018739, 2018906, 2019396, 2158336, 2159449, 2162160, 2297529, 2305930, 2310370, 2436324, 2437209, 2437804, 2439819, 2441154, 2447481, 2568916, 2569488, 2579043, 2696120, 2697935, 2711477, 2715019, 2835473, 2848919, 2853780, 2856193, 2970580, 2971380, 2975404, 2985770, 2987088, 2995888, 2997178, 2997455, 3103693, 3119353, 3127923, 3128793, 3131140, 3222680, 3240049, 3338674, 3346414, 3440346, 3447883, 3454720, 3458919, 3545235, 3550372, 3562009, 3633693, 3647940, 3654361, 3654842, 3661436, 3728919, 3735772, 3750264, 3750538, 3764943, 3766353, 3852384, 3939138, 3953212, 3955502, 3955867, 3967501, 3968716, 3970653, 4038445, 4045066, 4060319, 4074524, 4140231, 4143910, 4144729, 4155575, 4173334, 4178619, 4254666, 4278024, 4358067, 4372082, 4378838, 4473475, 4473933, 4474176, 4480298, 4482738, 4551712, 4551779, 4569590, 4576968, 4643909, 4663185, 4677684, 4677837, 4678686, 4732678, 4756864, 4758368, 4775208, 4826170, 4830178, 4850874, 4863093, 4863154, 4919243, 4929806, 4933782, 4940574, 4944586, 4944840, 4951617, 4999858, 5007728, 5024456, 5039127, 5095511, 5097962, 5112751, 5113526, 5115297, 5130101, 5131180, 5171320, 5182131, 5193386, 5209216, 5211470, 5211826, 5217379, 5218014, 5219986, 5262944, 5262973, 5281249, 5295586, 5301647, 5306850, 5307129, 5308778, 5341285, 5345216, 5370325, 5374733, 5374814, 5384168, 5385750, 5385778, 5394705, 5395763, 5395942, 5396587, 5430224, 5446068, 5446961, 5455870, 5467126, 5468551, 5470473, 5470969, 5471606, 5475645, 5480123, 5515044, 5517210, 5522575, 5553183, 5556256, 5557810, 5560747, 5566956, 5596701, 5598639, 5601939, 5610200, 5620305, 5652071, 5697921, 5724222, 5725149, 5725960, 5730593, 5731004, 5733729, 5737930, 5778988, 5792155, 5816671, 5818064, 5858919, 5892169, 5895751, 5897648, 5953993, 5954081, 5956596, 5960880, 5988842, 5989353, 6042991, 6059927, 6070991, 6109477, 6123671, 6127083, 6131884, 6138749, 6142585, 6144766, 6183171, 6187893, 6206407, 6206542, 6225065, 6227958, 6233558, 6287174, 6311518, 6347175, 6362068, 6363746, 6370758, 6380450, 6384264, 6385534, 6432008, 6437385, 6437663, 6445443, 6448764, 6468660, 6470683, 6501237, 6522125, 6524878, 6526377, 6531928, 6607610, 6611875, 6635778, 6676083, 6678328, 6700612, 6706164, 6707552, 6716476, 6717062, 6717417, 6753216, 6753396, 6757713, 6767914, 6785306, 6803706, 6805735, 6849670, 6851401, 6853199, 6853613, 6879477, 6887849, 6947022, 6948783, 6955822, 6963109, 7022588, 7037405, 7104105, 7122343, 7132015, 7134234, 7138844, 7173901, 7183249, 7199225, 7212816, 7215409, 7215954, 7220912, 7222334, 7350496, 7363468, 7377422, 7378008, 7378729, 7420545, 7440742, 7448302, 7451465, 7456026, 7466053, 7513498, 7515814, 7532172, 7540926, 7543694, 7543850, 7548655, 7551610, 7552212, 7581950, 7612170, 7622473, 7659018, 7659941, 7662566, 7686026, 7690692, 7690843, 7693833, 7696326, 7702822, 7703362, 7762669, 7769943, 7812628, 7838402, 7838958, 7847644, 7850078, 7869590, 7870909, 7889000, 7897925, 7901535, 7908953, 7909956, 7938112, 7938973, 7948258, 7969754, 7976424, 7987363, 8009525, 8013399, 8018709, 8038347, 8075555, 8086924, 8095742, 8104330, 8105798, 8114988, 8121523, 8123657, 8127465, 8128728, 8128806, 8129189, 8163250, 8173770, 8175133, 8178238, 8181280, 8182110, 8195488, 8218419, 8226464, 8250506, 8251092, 8258012, 8264549, 8265128, 8283117, 8289246, 8295007, 8300519, 8313583, 8321158, 8322611, 8326443, 8329540, 8330146, 8330614, 8331306, 8331470, 8344414, 8349031, 8350788, 8360354, 8373476, 8377741, 8378545, 8386035, 8387999, 8390399, 8394780, 8409750, 8410849, 8411124, 8417483, 8427166, 8454250, 8456818, 8479182, 8479383, 8479533, 8480642, 8490404, 8491779, 8494839, 8515227, 8516761, 8517303, 8518106, 8518932, 8526319, 8555181, 8559125, 8559146, 8569885, 8580394, 8581646, 8582408, 8588337, 8604325, 8619283, 8631133, 8638036, 8649781, 8687065, 8710336, 8719108, 8719897, 8720055, 8753927, 8756788, 8760788, 8773509, 8776260, 8782636, 8818252, 8821756, 8822505, 8841616, 8872048, 8890924, 8891195, 8891278, 8904619, 8905023, 8912308, 8913111, 8913420, 8915957, 8940728, 8951803, 8957218, 9008125, 9032671, 9073950, 9077412, 9143720, 9157161, 9158609, 9163796, 9179236, 9228354, 9236769, 9282853, 9289861, 9300113, 9304797, 9307354, 9307415, 9363108, 9369508, 9386002, 9396304, 9405969, 9413781, 9413793, 9419002, 9430155, 9451931, 9456623, 9466829, 9481531, 9489201, 9489955, 9549175, 9580167, 9595264, 9612084, 9632233, 9637423, 9651659, 9651996, 9673009, 9697262, 9704246, 9705156, 9716554, 9726196, 9754808, 9765062, 9767315, 9771905, 9789822, 9813963, 9835501, 9852964, 9882369, 9882614, 9884557, 9893440, 9902829, 9908560, 9935993, 9953661, 10024029, 10025720, 10030092, 10031707, 10058860, 10064822, 10068462, 10081136, 10089773, 10092485, 10096243, 10098539, 10149845, 10161482, 10198960, 10199454, 10220150, 10262841, 10265939, 10293335, 10297952, 10328903, 10341001, 10346528, 10383777, 10394987, 10416123, 10452126, 10453271, 10468372, 10490561, 10518095, 10528093, 10536882, 10556342, 10591797, 10592924, 10597857, 10622799, 10647686, 10658378, 10685794, 10686082, 10725108, 10734126, 10775669, 10785365, 10785446, 10795008, 10799049, 10809505, 10858868, 10925002, 10991989, 11028682, 11029161, 11037481, 11074131, 11080989, 11081207, 11090673, 11090674, 11093064, 11098411, 11122913, 11134682, 11146520, 11147460, 11152777, 11235671, 11244972, 11250788, 11297580, 11302930, 11352770, 11407895, 11408200, 11410398, 11444820, 11463197, 11514511, 11518371, 11554998, 11612249, 11617894, 11618883, 11650041, 11673802, 11674709, 11709619, 11724932, 11725034, 11760107, 11761046, 11767251, 11804799, 11810798, 11862515, 11862915, 11868264, 11958583, 11968514, 11970988, 11971166, 12004941, 12024497, 12071153, 12072363, 12104691, 12105944, 12109430, 12118682, 12156742, 12268408, 12365000, 12367310, 12418275, 12456693, 12505009, 12508882]

ruidehmergercandidates=[2583386, 2972876, 3097360, 3216736, 3648674, 4350501, 4667909, 4820412, 5166068, 5180345, 5341131, 5385518, 5556743, 5639438, 5696938, 5820672, 5857618, 6024654, 6118479, 6143256, 6182668, 6200178, 6273090, 6437547, 6620586, 6633766, 6690139, 6864132, 7121674, 7376259, 7457184, 7499531, 7509923, 7778197, 8023523, 8055108, 8096716, 8108732, 8277879, 8301083, 8364786, 8517859, 8558329, 8708536, 8827808, 9227589, 9326896, 9329200, 9474201, 9512519, 9642805, 9784586, 9903598, 9907511, 9945389, 10132814, 10420335, 10645209, 10712314, 11186389, 11302371, 11304067, 11465942, 11555266, 11805876, 12254159, 12301741]

   dr14b=mrdfits('~/Documents/Apogee/Courtney/Curator_APOKASC/year2/v6.0/APOKASC_cat_v6.7.2.fits', 1)

;   dr13b=mrdfits('~/Documents/Apogee/APOKASC_cat_v3.6.5.fits', 1)
;   match2, KICID, strcompress(dr13.KEPLER_ID), foundmine, findorig
;   bad=where(foundmine eq -1)
;   dr13b=dr13(foundmine)


   KICID=dr14b.KEPLER_ID
   KICint=dr14b.KEPLER_INT
   TMASSID=dr14b._2MASS_ID

RA=dr14b.RA
DEC=dr14b.DEC
Kepmag=dr14b.KEP_MAG

;   SeisLogg13=dr14b.LOGGRG
;   SeisLogg13[bad]=-9999
   CorTeff14=dr14b.DR14_TEFF_COR ;_POST
   CorTeff14err=dr14b.DR14_TEFF_COR_ERR
   Teff14=dr14b.DR14_TEFF_FIT
;   CorTeff13[bad]=-9999
   Logg14=dr14b.DR14_LOGG_FIT
   CorLogg14=dr14b.DR14_LOGG_COR ;_POST
   CorLogg14err=dr14b.DR14_LOGG_COR_ERR
;   CorLogg13[bad]=-9999
   FeH14=dr14b.DR14_FE_H_ADOP_FIT
   CorFeH14=dr14b.DR14_FE_H_ADOP_COR
   CorFeH14err=dr14b.DR14_FE_H_ADOP_COR_ERR
;   CorFeH13[bad]=-9999
   alphaFe14=dr14b.DR14_ALP_FE_ADOP_FIT
   CoralphaFe14=dr14b.DR14_ALP_FE_ADOP_COR
   CoralphaFe14err=dr14b.DR14_ALP_FE_ADOP_COR_ERR
   SeisMdw=dr14b.MASS_DW_SDSS
   SeisMdwerr=dr14b.MASS_DW_SDSS_PERR
   SeisLoggdw=dr14b.LOGG_DW_SDSS
   SeisLoggdwerr=dr14b.LOGG_DW_SDSS_PERR
   SeisRdw=dr14b.RADIUS_DW_SDSS
   SeisRdwerr=dr14b.RADIUS_DW_SDSS_PERR
;   CoralphaFe13[bad]=-9999
   AlFe14=dr14b.DR14_AL_FE
   CaFe14=dr14b.DR14_CA_FE
   CFe14=dr14b.DR14_C_FE
   CFe14err=dr14b.DR14_C_FE_ERR
   KFe14=dr14b.DR14_K_FE
   MgFe14=dr14b.DR14_MG_FE
   MnFe14=dr14b.DR14_MN_FE
   NaFe14=dr14b.DR14_NA_FE
   NiFe14=dr14b.DR14_NI_FE
   NFe14=dr14b.DR14_N_FE
   NFe14err=dr14b.DR14_N_FE_ERR
   OFe14=dr14b.DR14_O_FE
   SiFe14=dr14b.DR14_SI_FE
   SFe14=dr14b.DR14_S_FE
   TiFe14=dr14b.DR14_TI_FE
   VFe14=dr14b.DR14_V_FE
;   F8Logg=dr14b.F8_LOGG
;   vmicro13=dr14b.DR13_VMICRO
;   APGvsini13=dr14b.DR13_VSINI
   ConEvstates=dr14b.CONS_EVSTATES
   CEvstates=0.0*OFe14-9999.0  	
   nvisits=dr14b.DR16_NVISITS
   vscatter=dr14b.DR16_VSCATTER
   CannonLogg=dr14b.CANNON_LOGG

;  SeisLogg14=dr14b.LOGGRG
;   SeisLogg13[bad]=-9999
   CorTeff16=dr14b.DR16_TEFF_COR
   CorTeff16err=dr14b.DR16_TEFF_COR_ERR
   Teff16=dr14b.DR16_TEFF_FIT
;   CorTeff13[bad]=-9999
   Logg16=dr14b.DR16_LOGG_FIT
   CorLogg16=dr14b.DR16_LOGG_COR
   CorLogg16err=dr14b.DR16_LOGG_COR_ERR
;   CorLogg13[bad]=-9999
   FeH16=dr14b.DR16_M_H_FIT
   CorFeH16=dr14b.DR16_M_H_COR
   CorFeH16err=dr14b.DR16_M_H_COR_ERR
;   CorFeH13[bad]=-9999
   alphaFe16=dr14b.DR16_ALP_M_FIT
   CoralphaFe16=dr14b.DR16_ALP_M_COR
   CoralphaFe16err=dr14b.DR16_ALP_M_COR_ERR
;   CoralphaFe13[bad]=-9999
   AlFe16=dr14b.DR16_AL_FE
   CaFe16=dr14b.DR16_CA_FE
   CFe16=dr14b.DR16_C_FE
   CFe16err=dr14b.DR16_C_FE_ERR
   KFe16=dr14b.DR16_K_FE
   MgFe16=dr14b.DR16_MG_FE
   MnFe16=dr14b.DR16_MN_FE
   NaFe16=dr14b.DR16_NA_FE
   NiFe16=dr14b.DR16_NI_FE
   NFe16=dr14b.DR16_N_FE
   NFe16err=dr14b.DR16_N_FE_ERR
   OFe16=dr14b.DR16_O_FE
   SiFe16=dr14b.DR16_SI_FE
   SFe16=dr14b.DR16_S_FE
   TiFe16=dr14b.DR16_TI_FE
   VFe16=dr14b.DR16_V_FE
   actualFeH16=dr14b.DR16_FE_H
   vmicro16=dr14b.DR16_VMICRO
   APGvsini16=dr14b.DR16_VSINI
   ConEvstates=dr14b.CONS_EVSTATES
   CEvstates=0.0*OFe14-9999.0  	
   dwarfmass=dr14b.MASS_DW
   dwarfmassperr=dr14b.MASS_DW_PERR
   dwarfmassmerr=dr14b.MASS_DW_MERR
   dwarfmassmaxpm=dr14b.MASS_DW_PERR
   mgtp=where( dwarfmassmerr gt dwarfmassperr)
   if mgtp[0] gt -1 then dwarfmassmaxpm[mgtp]=dwarfmassmerr[mgtp]
   dwarfmasssyserr=dr14b.MASS_DW_SYSERR
   dwarfmasstoterr=sqrt(dwarfmasssyserr^2.+dwarfmassmaxpm^2.)
   dwarflogg=dr14b.LOGG_DW
   dwarfnumax=dr14b.NU_MAXDW
   dwarfnumaxerr=dr14b.NU_MAXDW_TOTERR

   EMPnumax=dr14b.APOKASC2_NU_MAX
   EMPnumaxerr=dr14b.APOKASC2_NU_MAX_ERR
   EMPdelnu=dr14b.APOKASC2_DELTA_NU
   EMPdelnuerr=dr14b.APOKASC2_DELTA_NU_ERR
   EMPSeisMscale=dr14b.APOKASC2_MASS
   EMPSeisMscaleerr=dr14b.APOKASC2_MASS_RANERR
   EMPSeisRscale=dr14b.APOKASC2_RADIUS
   EMPSeisRscaleerr=dr14b.APOKASC2_RADIUS_RANERR
   EMPSeisLoggscale=dr14b.APOKASC2_LOGG
   EMPSeisLoggscaleerr=dr14b.APOKASC2_LOGG_RANERR
   EMPSeisAge=dr14b.APOKASC2_AGE
   EMPSeisAgeerr=dr14b.APOKASC2_AGE_PERR

   GaiaR=dr14b.GAIA_RADIUS
   GaiaTeff=dr14b.GAIA_TEFF
   GaiaL=dr14b.GAIA_LUMINOSITY 
   Gaiaparallax=dr14b.GAIA_PARALLAX_DR2
   Gaiadistance=1./Gaiaparallax

   YuSeisRrgb=dr14b.YU_RADIUS_RGB
   YuSeisMrgb=dr14b.YU_MASS_RGB
   PWbinaryP=dr14b.PW_BINARY_P
   PWbinaryE=dr14b.PW_BINARY_E
   A3CEvstates=dr14b.APOKASC3_CONS_EVSTATES

;APPLY APOGEE CORRECTIONS FOR DR13 POST-HOC
;  teffcorg= where(CorFeH13 gt -9999)
;  CorTeff13(teffcorg)=CorTeff13(teffcorg)+36.17-95.97*CorFeH13(teffcorg)+15.09*CorFeH13(teffcorg)*CorFeH13(teffcorg)
;  loggcorg=where(CorFeH13 ge -2.5 and CorFeH13 lt -1.5 and CorFeH13 gt -9999)
;  CorLogg13[loggcorg]=CorLogg13[loggcorg]-0.5*(CorFeH13[loggcorg]+1.5)


state=where(ConEvstates eq 'RC')
if state[0] ne -1 then CEvstates[state]=1
state=where(ConEvstates eq '2CL')
if state[0] ne -1 then CEvstates[state]=2
state=where(ConEvstates eq 'RGB')
if state[0] ne -1 then CEvstates[state]=3
state=where(ConEvstates eq 'RC/2CL')
if state[0] ne -1 then CEvstates[state]=1.5
state=where(ConEvstates eq 'AGB')
if state[0] ne -1 then CEvstates[state]=4
state=where(ConEvstates eq 'RGB/AGB')
if state[0] ne -1 then CEvstates[state]=3.5
state=where(ConEvstates eq 'U')
if state[0] ne -1 then CEvstates[state]=5
state=where(ConEvstates eq 'Reject')
if state[0] ne -1 then CEvstates[state]=6
state=where(ConEvstates eq 'RC/U')
if state[0] ne -1 then CEvstates[state]=1.2
state=where(ConEvstates eq 'RGB/U')
if state[0] ne -1 then CEvstates[state]=2.8
state=where(ConEvstates eq '2CL/U')
if state[0] ne -1 then CEvstates[state]=2.2

;(3=RGB, 2=2CL, 1=RC, 1.5=RC/2CL, 3.5=RGB/AGB, 5=U, 6=Reject


  SeisDataflag=0*CEvstates
  num=where(SeisDataflag eq 0 and dr14b.VANSADERS eq 'T')
  if num[0] ne -1 then SeisDataflag[num]=1
  num=where(SeisDataflag eq 0 and (dr14b.CHAPLIN eq 'T' or dr14b.NU_MAXDW gt 0 or dr14b.DELTA_NUDW gt 0))
  if num[0] ne -1 then SeisDataflag[num]=2
  num=where(SeisDataflag eq 0 and CEvstates gt 0)
  if num[0] ne -1 then SeisDataflag[num]=3
  num=where(SeisDataflag eq 0 and (CorTeff14 lt -9998 or CorLogg14 lt -9998 or CorFeH14 lt -9998))
  if num[0] ne -1 then SeisDataflag[num]=4
  num=where(SeisDataflag eq 0 and dr14b.EB_PER ge 0)
  if num[0] ne -1 then SeisDataflag[num]=5
  num=where(SeisDataflag eq 0 and dr14b.N_KEP_QUART le 5)
  if num[0] ne -1 then SeisDataflag[num]=6
  num=where(SeisDataflag eq 0 and dr14b.CONSEC_3_QUART eq 'F')
  if num[0] ne -1 then SeisDataflag[num]=7 

GHBteff=-9999+0.0*CorFeH14
good=where(dr14b.J_MAG_2M gt -9998 and dr14b.K_MAG_2M gt -9998 and dr14b.J_MAG_2M-dr14b.K_MAG_2M gt 0.1 and dr14b.J_MAG_2M-dr14b.K_MAG_2M lt 0.9 and CorFeH14 lt 0.2 and CorFeH14 gt -4.0 and CorLogg14 lt 3.2 and CorTeff14 gt 4000)
X=dr14b.J_MAG_2M-dr14b.K_MAG_2M
GHBteff[good]=5040./(0.6517+0.6312*X[good]+0.0168*X[good]*X[good]-0.0381*X[good]*CorFeH14[good]+0.0256*CorFeH14[good]+0.0013*CorFeH14[good]*CorFeH14[good])

  A3Pnumax=dr14b.APOKASC3P_NU_MAX ;_WTCOR
  A3Pdelnu=dr14b.APOKASC3P_DELTA_NU
  
;  SYDnumax=dr14b.SYD_NU_MAX
;  SYDdelnu=dr14b.SYD_DELTA_NU
;  OCTnumax=dr14b.OCT_NU_MAX
;  OCTdelnu=dr14b.OCT_DELTA_NU
;  A2Znumax=dr14b.A2Z_NU_MAX
;  A2Zdelnu=dr14b.A2Z_DELTA_NU
;  CANnumax=dr14b.CAN_NU_MAX
;  CANdelnu=dr14b.CAN_DELTA_NU
;  CORnumax=dr14b.COR_NU_MAX
;  CORdelnu=dr14b.COR_DELTA_NU

SYDnumaxsol=3090
OCTnumaxsol=3139. ;Courtney
Teffsol=5771.8  ;Teff from Mamajek
OCTdelnusol=135.045 ;Courtney
SYDdelnusol=135.1
bigG=6.67259*10^(-8.0) ;cgs
Msun=1.99*10^(33.0) ;g
Rsuncm=6.96*10^(10.0) ;cm
Rsun=6.96*10^(5.0) ;km
gsol=27423 ;  cgs

A3PSeisMscale= dr14b.APOKASC3P_MASS ;-9999+0.0*A3Pnumax
A3PSeisMscaleerr= dr14b.APOKASC3P_MASS_ERR
A3PSeisRscale= dr14b.APOKASC3P_RADIUS
A3PSeisRscaleerr=dr14b.APOKASC3P_RADIUS_ERR
A3PSeisLoggscale=dr14b.APOKASC3P_LOGG ;-9999+0.0*A3Pnumax
A3PSeisLoggscaleerr=dr14b.APOKASC3P_LOGG_ERR 
A3PGaiaR=1./(dr14b.INVR_KM)

;OCTSeisMscaleGHB=-9999+0.0*OCTnumax
;OCTSeisRscaleGHB=-9999+0.0*OCTnumax
;OCTSeisLoggscaleGHB=-9999+0.0*OCTnumax

;OCTSeisMscale=-9999+0.0*OCTnumax
;OCTSeisRscale=-9999+0.0*OCTnumax
;OCTSeisLoggscale=-9999+0.0*OCTnumax
;SYDSeisLoggscale=-9999+0.0*SYDnumax
;SYDSeisMscale=-9999+0.0*OCTnumax
;SYDSeisRscale=-9999+0.0*OCTnumax

;SYDSeisLoggscalecor=-9999+0.0*SYDnumax
;SYDSeisMscalecor=-9999+0.0*OCTnumax
;SYDSeisRscalecor=-9999+0.0*OCTnumax
;OCTSeisMscalecor=-9999+0.0*OCTnumax
;OCTSeisRscalecor=-9999+0.0*OCTnumax
;OCTSeisLoggscalecor=-9999+0.0*OCTnumax;

;A2ZSeisMscale13sol=-9999+0.0*OCTnumax
;CORSeisMscale13sol=-9999+0.0*OCTnumax
;CANSeisMscale13sol=-9999+0.0*OCTnumax
;OCTSeisMscale13sol=-9999+0.0*OCTnumax
;SYDSeisMscale13sol=-9999+0.0*OCTnumax

;A2ZSeisRscale13sol=-9999+0.0*OCTnumax
;CORSeisRscale13sol=-9999+0.0*OCTnumax
;CANSeisRscale13sol=-9999+0.0*OCTnumax
;OCTSeisRscale13sol=-9999+0.0*OCTnumax
;SYDSeisRscale13sol=-9999+0.0*OCTnumax

good=where(CorTeff16 gt 0 and A3Pnumax gt 0 and A3Pdelnu gt 0)
;A3PSeisMscale(good)= (A3Pdelnu(good)/SYDdelnusol)^(-4.0)* (A3Pnumax(good)/SYDnumaxsol)^(3.0)*(CorTeff16(good)/Teffsol)^(1.5)
;A3PSeisRscale(good)= (A3Pdelnu(good)/SYDdelnusol)^(-2.0)* (A3Pnumax(good)/SYDnumaxsol)*(CorTeff16(good)/Teffsol)^0.5
;A3PSeisLoggscale(good)= ALOG10(gsol*(A3Pnumax(good)/SYDnumaxsol)*(CorTeff16(good)/Teffsol)^0.5)

;good=where(CorTeff13 gt 0 and A2Znumax gt 0 and A2Zdelnu gt 0 and OCTnumax gt 0 and OCTdelnu gt 0 and CANnumax gt 0 and CANdelnu gt 0 and CORnumax gt 0 and CORdelnu gt 0 and SYDnumax gt 0 and SYDdelnu gt 0)


;A2ZSeisMscale13sol(good)= (A2Zdelnu(good)/SYDdelnusol)^(-4.0)* (A2Znumax(good)/SYDnumaxsol)^(3.0)*(CorTeff13(good)/Teffsol)^(1.5)
;A2ZSeisRscale13sol(good)= (A2Zdelnu(good)/SYDdelnusol)^(-2.0)* (A2Znumax(good)/SYDnumaxsol)*(CorTeff13(good)/Teffsol)^0.5
;CANSeisMscale13sol(good)= (CANdelnu(good)/SYDdelnusol)^(-4.0)* (CANnumax(good)/SYDnumaxsol)^(3.0)*(CorTeff13(good)/Teffsol)^(1.5)
;CANSeisRscale13sol(good)= (CANdelnu(good)/SYDdelnusol)^(-2.0)* (CANnumax(good)/SYDnumaxsol)*(CorTeff13(good)/Teffsol)^0.5
;CORSeisMscale13sol(good)= (CORdelnu(good)/SYDdelnusol)^(-4.0)* (CORnumax(good)/SYDnumaxsol)^(3.0)*(CorTeff13(good)/Teffsol)^(1.5)
;CORSeisRscale13sol(good)= (CORdelnu(good)/SYDdelnusol)^(-2.0)* (CORnumax(good)/SYDnumaxsol)*(CorTeff13(good)/Teffsol)^0.5
;OCTSeisMscale13sol(good)= (OCTdelnu(good)/SYDdelnusol)^(-4.0)* (OCTnumax(good)/SYDnumaxsol)^(3.0)*(CorTeff13(good)/Teffsol)^(1.5)
;OCTSeisRscale13sol(good)= (OCTdelnu(good)/SYDdelnusol)^(-2.0)* (OCTnumax(good)/SYDnumaxsol)*(CorTeff13(good)/Teffsol)^0.5
;SYDSeisMscale13sol(good)= (SYDdelnu(good)/SYDdelnusol)^(-4.0)* (SYDnumax(good)/SYDnumaxsol)^(3.0)*(CorTeff13(good)/Teffsol)^(1.5)
;SYDSeisRscale13sol(good)= (SYDdelnu(good)/SYDdelnusol)^(-2.0)* (SYDnumax(good)/SYDnumaxsol)*(CorTeff13(good)/Teffsol)^0.5

;good= where(CorTeff14 gt 0 and OCTnumax gt 0 and OCTdelnu gt 0)
;OCTSeisMscale(good)= (OCTdelnu(good)/OCTdelnusol)^(-4.0)* (OCTnumax(good)/OCTnumaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)
;OCTSeisRscale(good)= (OCTdelnu(good)/OCTdelnusol)^(-2.0)* (OCTnumax(good)/OCTnumaxsol)*(CorTeff14(good)/Teffsol)^0.5
;OCTSeisLoggscale(good)= ALOG10(gsol*(OCTnumax(good)/OCTnumaxsol)*(CorTeff14(good)/Teffsol)^0.5)

;good= where(GHBteff gt 0 and OCTnumax gt 0 and OCTdelnu gt 0)
;OCTSeisMscaleGHB(good)= (OCTdelnu(good)/OCTdelnusol)^(-4.0)* (OCTnumax(good)/OCTnumaxsol)^(3.0)*(GHBteff(good)/Teffsol)^(1.5)
;OCTSeisRscaleGHB(good)= (OCTdelnu(good)/OCTdelnusol)^(-2.0)* (OCTnumax(good)/OCTnumaxsol)*(GHBteff(good)/Teffsol)^0.5
;OCTSeisLoggscaleGHB(good)= ALOG10(gsol*(OCTnumax(good)/OCTnumaxsol)*(GHBteff(good)/Teffsol)^0.5);


;good= where(CorTeff14 gt 0 and SYDnumax gt 0 and SYDdelnu gt 0)
;SYDSeisMscale(good)= (SYDdelnu(good)/SYDdelnusol)^(-4.0)* (SYDnumax(good)/SYDnumaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)
;SYDSeisRscale(good)= (SYDdelnu(good)/SYDdelnusol)^(-2.0)* (SYDnumax(good)/SYDnumaxsol)*(CorTeff14(good)/Teffsol)^0.5
;SYDSeisLoggscale(good)= ALOG10(gsol*(SYDnumax(good)/SYDnumaxsol)*(CorTeff14(good)/Teffsol)^0.5)

;dnuref=(1.2*CorFeH14+2.8)*exp((-0.85*CorFeH14+0.52)*CorTeff14/10.^4)*cos(20.97*CorTeff14/10.^4+0.44*CorFeH14+0.83)+0.79*CorFeH14+134.68
;good= where(CorTeff14 gt 0 and SYDnumax gt 0 and SYDdelnu gt 0 and CorFeH14 gt -9998)
;SYDSeisMscalecor(good)= (SYDdelnu(good)/dnuref(good))^(-4.0)* (SYDnumax(good)/SYDnumaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)
;SYDSeisRscalecor(good)= (SYDdelnu(good)/dnuref(good))^(-2.0)* (SYDnumax(good)/SYDnumaxsol)*(CorTeff14(good)/Teffsol)^0.5
;SYDSeisLoggscalecor(good)= ALOG10(gsol*(SYDnumax(good)/SYDnumaxsol)*(CorTeff14(good)/Teffsol)^0.5)

;dnuref=(1.2*CorFeH14+2.8)*exp((-0.85*CorFeH14+0.52)*CorTeff14/10.^4)*cos(20.97*CorTeff14/10.^4+0.44*CorFeH14+0.83)+0.79*CorFeH14+134.68
;good= where(CorTeff14 gt 0 and OCTnumax gt 0 and OCTdelnu gt 0 and CorFeH14 gt -9998)
;OCTSeisMscalecor(good)= (OCTdelnu(good)/dnuref(good))^(-4.0)* (OCTnumax(good)/OCTnumaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)
;OCTSeisRscalecor(good)= (OCTdelnu(good)/dnuref(good))^(-2.0)* (OCTnumax(good)/OCTnumaxsol)*(CorTeff14(good)/Teffsol)^0.5
;OCTSeisLoggscalecor(good)= ALOG10(gsol*(OCTnumax(good)/OCTnumaxsol)*(CorTeff14(good)/Teffsol)^0.5)



;OSSeisMscaleerr=-9999+0.0*OCTnumax
;OSSeisRscaleerr=-9999+0.0*OCTnumax
;OSSeisLoggscaleerr=-9999+0.0*OCTnumax
;good=where(CorTeff14 gt 0 and SYDnumax gt 0 and SYDdelnu gt 0 and OCTnumax gt 0 and OCTdelnu gt 0)
;OSSeisMscaleerr(good)=abs(OCTSeisMscale(good)-SYDSeisMscale(good))
;OSSeisRscaleerr(good)=abs(OCTSeisRscale(good)-SYDSeisRscale(good))
;OSSeisLoggscaleerr(good)=abs(OCTSeisLoggscale(good)-SYDSeisLoggscale(good))

;   dr14p=mrdfits('/home/spitzer/tayar/Documents/Apogee/Courtney/Curator_APOKASC/year2/v4.0/APOKASC_cat_v4.0.0.fits', 1)
;   CorTeff14=dr14p.TEFF_COR
;   CorLogg14=dr14p.LOGG_COR
;   CorFeH14=dr14p.FE_H_ADOP_COR
;   LocID14=dr14p.LOC_ID
;   KICID14=dr14p.KEPLER_ID
;   TMASSID14=dr14p._2MASS_ID
;   CoralphaFe14=dr14p.ALP_FE_ADOP_COR



;   dr14apg=mrdfits('~/Documents/Apogee/Courtney/Curator_APOKASC/year2/v4.0/allStar-l31c.2.fits', 1)
;   apg2mass=dr14apg.APOGEE_ID
;   match2, TMASSID, apg2mass, foundmine, findorig   
;   CHAPG=dr14apg.C_FE
;   CHAPG=CHAPG(foundmine)
;   fparam=dr14apg.FPARAM
;   rawCFE=fparam[4,*]
;   rawCFE=rawCFE(foundmine)
;   rawNFE=fparam[5,*]
;   rawNFE=rawNFE(foundmine)
;   rawmetals=fparam[3,*]
;   rawmetals=rawmetals(foundmine)
;   rawCH=rawCFE+rawmetals
;   rawCN=rawCFE-rawNFE
;   felm=dr14apg.FELEM
;   rawAlH=felm[6,*]
;   rawAlH=rawAlH(foundmine)
;   rawFeH=felm[17,*]
;   rawFeH=rawFeH(foundmine)
;   rawAlFe=rawAlH-rawFeH

   readcol2, '~/Documents/Apogee/APOKASCcontaminationcheck.txt', skipline=6, KICIDcon, delmagcont,  FORMAT='A,X,X,X,F'


   match2, KICID, KICIDcon, foundmine, findorig

   bad=where(foundmine eq -1 or delmagcont eq 0)
   KICIDcon=KICIDcon(foundmine)
   KICIDcon[bad]= '-9999'
   delmagcont=delmagcont(foundmine)
   delmagcont[bad]= '-9999'  
  num=where(SeisDataflag eq 0 and delmagcont gt -2.0)
  SeisDataflag[num]=8 



   readcol2, '~/Documents/Apogee/flickergravities.tab', skipline=11, KICIDflick, flickerrange, flicker,  FORMAT='A,X,X,X,X,F,F,X'


   match2, KICID, KICIDflick, foundmine, findorig

   bad=where(foundmine eq -1 )
   KICIDflick=KICIDflick(foundmine)
   KICIDflick[bad]= '-9999'
   flickerrange=flickerrange(foundmine)
   flickerrange=ALOG10(flickerrange)
   flickerrange[bad]= '-9999'  
   flicker=flicker(foundmine)
   flicker[bad]= '-9999'




;   readcol2, '~/Documents/Apogee/A2Zallfix.dat', skipline=1, KICID,  delnuT12, delnuT12err, numaxT12, numaxT12err, $ 
;       flaga2z,  FORMAT='A,F,F,X,X,F,F,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,X,I'
   readcol2, '~/Documents/Apogee/RGall_may1.txt', skipline=1, KICIDS, numaxT12, numaxT12err, delnuT12, delnuT12err, $ 
       flaga2z,  FORMAT='A,F,F,F,F,I'


   match2, KICID, KICIDS, foundmine, findorig

   bad=where(numaxT12 lt 5 or flaga2z eq 1)
;   print, KICIDS[0], numaxT12[0], flaga2z[0]
   KICIDS=KICIDS(foundmine)
   KICIDS[bad]= '-9999'
   numaxT12=numaxT12(foundmine)
   numaxT12[bad]= '-9999'
   numaxT12err=numaxT12err(foundmine)
   numaxT12err[bad]= '-9999'
   delnuT12=delnuT12(foundmine)
   delnuT12[bad]= '-9999'
   delnuT12err=delnuT12err(foundmine)
   delnuT12err[bad]= '-9999'
   flaga2z=flaga2z(foundmine)
   flaga2z[bad]= '-9999'


hlines=217;
datafile='~/Documents/Apogee/APOKASC_Catalog.v7.1.txt'


; READ IN APOKASC CATALOG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; loadct, 34
   n_lines=file_lines(datafile)-hlines
;

   readcol2, datafile, skipline=hlines, $
       KICIDold, TMASSIDold, RA, DEC, PropRAMot, PropDecMot, AvailFlag, KICgMag, KICgMagerr,$
       KICrMag,KICrMagerr, KICiMag,KICiMagerr, KICzMag,KICzMagerr, SDSSgMag,SDSSgMagerr,$
       SDSSrMag,SDSSrMagerr, SDSSiMag,SDSSiMagerr, SDSSzMag,SDSSzMagerr, KICMag,$
       TeffYREC, TeffYRECerr, corTeffYREC, corTeffYRECerr, TeffCasa, TeffCasaerr, TeffGHB,  KICTeff, $
       KIClogg, KICFeH,KICEBmV, TMASSJMag, TMASSJMagerr, TMASSHMag, TMASSHMagerr, $
       TMASSKMag, TMASSKMagerr,TMASSqual, Photmqual, Teff, CorTeff, CorTefferr, $
       Logg, CorLogg, CorLoggerr, Vmicro,CorVmicro,CorVmicroerr, FeH, CorFeH, CorFeHerr, CFe, CorCFe, CorCFeerr, NFe, $
       CorNFe, CorNFeerr, alphaFe, CoralphaFe, CoralphaFeerr, ASPCAPchi2, SNR, Vhelio, Vscatt, Wise45, Wise45err, $
       SpecVsini, SpecVsinierr,Evstate, TeffS1GMI, TeffS1GMIerr, ZS1GMI, ZS1GMIerr,$ 
       TeffS2GMI, TeffS2GMIerr, ZS2GMI, ZS2GMIerr,$       
       PreSeisLoggRG, PreSeisLoggRGerr, delnuRG, delnuRGerr, $
       numaxRG, numaxRGerr, $ 
       SeisMS1RG, SeisMS1RGperr, SeisMS1RGmerr, SeisRS1RG, SeisRS1RGperr, SeisRS1RGmerr, $
       SeisLoggS1RG, SeisLoggS1RGperr, SeisLoggS1RGmerr, SeisRhoS1RG, SeisRhoS1RGperr, SeisRhoS1RGmerr, $
       SeisMS2RG, SeisMS2RGperr, SeisMS2RGmerr, SeisRS2RG, SeisRS2RGperr, SeisRS2RGmerr, $
       SeisLoggS2RG, SeisLoggS2RGperr, SeisLoggS2RGmerr, SeisRhoS2RG, SeisRhoS2RGperr, SeisRhoS2RGmerr, $
       PreSeisLoggDw, PreSeisLoggDwerr,delnuDw, delnuDwerr, numaxDw, numaxDwerr, $
       SeisMS1DW, SeisMS1DWperr, SeisMS1DWmerr, SeisRS1DW, SeisRS1DWperr, SeisRS1DWmerr, $
       SeisLoggS1DW, SeisLoggS1DWperr, SeisLoggS1DWmerr, SeisRhoS1DW, SeisRhoS1DWperr, SeisRhoS1DWmerr, $
       SeisMS2DW, SeisMS2DWperr, SeisMS2DWmerr, SeisRS2DW, SeisRS2DWperr, SeisRS2DWmerr, $
       SeisLoggS2DW, SeisLoggS2DWperr, SeisLoggS2DWmerr, SeisRhoS2DW, SeisRhoS2DWperr, SeisRhoS2DWmerr, $
       APGplate, APGplateID, APGLocID,TarFlagStarCat, TarFlagAPG,ASPCAPFlags, $
FORMAT="A,A,F,F,F,F,I,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,A,I,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,A,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,A,I,I,A,A,A"
;KICIDold=KICID
;

print, ASPCAPFlags[0]
print, ASPCAPFlags[1]

   match2, KICID, KICIDold, foundmine, findorig
   bad=where(foundmine eq -1)
   KICIDold=KICIDold(foundmine)
   KICIDold[bad]= '-9999'
   Evstate=Evstate(foundmine)
   Evstate[bad]= '-9999'
   CorTeff=CorTeff(foundmine)
   CorTeff[bad]= '-9999'
   CorLogg=CorLogg(foundmine)
   CorLogg[bad]= '-9999'
   CorFeH=CorFeH(foundmine)
   CorFeH[bad]= '-9999'
   CoralphaFe=CoralphaFe(foundmine)
   CoralphaFe[bad]= '-9999'
   
   CorTefferr=CorTefferr(foundmine)
   CorTefferr[bad]= '-9999'
   CorLoggerr=CorLoggerr(foundmine)
   CorLoggerr[bad]= '-9999'
   CorFeHerr=CorFeHerr(foundmine)
   CorFeHerr[bad]= '-9999'
   CoralphaFeerr=CoralphaFeerr(foundmine)
   CoralphaFeerr[bad]= '-9999'

   SeisMS1RG=SeisMS1RG(foundmine)
   SeisMS1RG[bad]='-9999'
   SeisMS1RGperr=SeisMS1RGperr(foundmine)
   SeisMS1RGperr[bad]='-9999'   
   SeisMS1RGmerr=SeisMS1RGmerr(foundmine)
   SeisMS1RGmerr[bad]='-9999'  
   SeisMS2RG=SeisMS2RG(foundmine)
   SeisMS2RG[bad]='-9999'
   SeisMS2RGperr=SeisMS2RGperr(foundmine)
   SeisMS2RGperr[bad]='-9999'   
   SeisMS2RGmerr=SeisMS2RGmerr(foundmine)
   SeisMS2RGmerr[bad]='-9999'  

   SeisRS1RG=SeisRS1RG(foundmine)
   SeisRS1RG[bad]='-9999'
   SeisRS1RGperr=SeisRS1RGperr(foundmine)
   SeisRS1RGperr[bad]='-9999'   
   SeisRS1RGmerr=SeisRS1RGmerr(foundmine)
   SeisRS1RGmerr[bad]='-9999'  
   SeisRS2RG=SeisRS2RG(foundmine)
   SeisRS2RG[bad]='-9999'
   SeisRS2RGperr=SeisRS2RGperr(foundmine)
   SeisRS2RGperr[bad]='-9999'   
   SeisRS2RGmerr=SeisRS2RGmerr(foundmine)
   SeisRS2RGmerr[bad]='-9999'  


   SeisLoggS1RG=SeisLoggS1RG(foundmine)
   SeisLoggS1RG[bad]='-9999'
   SeisLoggS1RGperr=SeisLoggS1RGperr(foundmine)
   SeisLoggS1RGperr[bad]='-9999'   
   SeisLoggS1RGmerr=SeisLoggS1RGmerr(foundmine)
   SeisLoggS1RGmerr[bad]='-9999'  
   SeisLoggS2RG=SeisLoggS2RG(foundmine)
   SeisLoggS2RG[bad]='-9999'
   SeisLoggS2RGperr=SeisLoggS2RGperr(foundmine)
   SeisLoggS2RGperr[bad]='-9999'   
   SeisLoggS2RGmerr=SeisLoggS2RGmerr(foundmine)
   SeisLoggS2RGmerr[bad]='-9999'  


   SeisMS1DW=SeisMS1DW(foundmine)
   SeisMS1DW[bad]='-9999'
   SeisMS1DWperr=SeisMS1DWperr(foundmine)
   SeisMS1DWperr[bad]='-9999'   
   SeisMS1DWmerr=SeisMS1DWmerr(foundmine)
   SeisMS1DWmerr[bad]='-9999'  
   SeisMS2DW=SeisMS2DW(foundmine)
   SeisMS2DW[bad]='-9999'
   SeisMS2DWperr=SeisMS2DWperr(foundmine)
   SeisMS2DWperr[bad]='-9999'   
   SeisMS2DWmerr=SeisMS2DWmerr(foundmine)
   SeisMS2DWmerr[bad]='-9999'  

   SeisRS1DW=SeisRS1DW(foundmine)
   SeisRS1DW[bad]='-9999'
   SeisRS1DWperr=SeisRS1DWperr(foundmine)
   SeisRS1DWperr[bad]='-9999'   
   SeisRS1DWmerr=SeisRS1DWmerr(foundmine)
   SeisRS1DWmerr[bad]='-9999'  
   SeisRS2DW=SeisRS2DW(foundmine)
   SeisRS2DW[bad]='-9999'
   SeisRS2DWperr=SeisRS2DWperr(foundmine)
   SeisRS2DWperr[bad]='-9999'   
   SeisRS2DWmerr=SeisRS2DWmerr(foundmine)
   SeisRS2DWmerr[bad]='-9999'  


   SeisLoggS1DW=SeisLoggS1DW(foundmine)
   SeisLoggS1DW[bad]='-9999'
   SeisLoggS1DWperr=SeisLoggS1DWperr(foundmine)
   SeisLoggS1DWperr[bad]='-9999'   
   SeisLoggS1DWmerr=SeisLoggS1DWmerr(foundmine)
   SeisLoggS1DWmerr[bad]='-9999'  
   SeisLoggS2DW=SeisLoggS2DW(foundmine)
   SeisLoggS2DW[bad]='-9999'
   SeisLoggS2DWperr=SeisLoggS2DWperr(foundmine)
   SeisLoggS2DWperr[bad]='-9999'   
   SeisLoggS2DWmerr=SeisLoggS2DWmerr(foundmine)
   SeisLoggS2DWmerr[bad]='-9999'  



hlines=85;
datafile='~/Documents/Apogee/APOKASC_cat_v2.2.7.txt'

;; READ IN APOKASC CATALOG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 loadct, 34
   n_lines=file_lines(datafile)-hlines


   readcol2, datafile, skipline=hlines, $
       KICID2, TMASSID2, APGLocID,RA12, DEC12, PropRAMot12, PropDecMot12, KICgMag, $
       KICrMag, KICiMag,KICzMag,TMASSJMag, TMASSJMagerr, TMASSHMag, TMASSHMagerr, $
       TMASSKMag, TMASSKMagerr, SDSSuMag,SDSSuMagerr, SDSSgMag,SDSSgMagerr,$
       SDSSrMag,SDSSrMagerr, SDSSiMag,SDSSiMagerr, SDSSzMag,SDSSzMagerr, Wise45, Wise45err, KICMag,$
       KICTeff, $
       KIClogg, KICFeH,KICEBmV12,TeffSDSS, TeffSDSSerr, TeffCasa, TeffCasaerr, ASPCAPchi2, SNR, Vhelio, Vscatt, Teff12, CorTeff12, CorTeff12err, $
       Logg12, CorLogg12, CorLogg12err, FeH12, CorFeH12, CorFeH12err, alphaFe12, CoralphaFe12, CoralphaFe12err, AlH, AlHerr, CaH, CaHerr, CH, CHerr, $
       FeH2, FeH2err, KH, KHerr, MgH, MgHerr, MnH, MnHerr, NaH, NaHerr, NH, $
       NHerr,  OH, OHerr, SiH, SiHerr, SH, SHerr, TiH, TiHerr, VH, VHerr, $
FORMAT="A,A,I,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,X,X,X,X,X,X,X,X,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F"

;It's reading in the last three columns wrong because of the commas.  I don't know that I care enough to fix it.
; remove this matching stuff when perma switch to version 2, and return KICID2 to KICID
;KICID=KICID2 ;delete this line if you wish to use any DR10 APG values
;TMASSID=TMASSID2
   
   match2, KICID, KICID2, foundmine, findorig
   bad=where(foundmine eq -1)
   if bad[0] ne -1 then begin
   KICID2=KICID2(foundmine)
   KICID2[bad]= '-9999'
   TMASSIDold=TMASSID2(foundmine)
   TMASSIDold[bad]= ' -9999'
   Teff12=Teff12(foundmine)
   Teff12[bad]= '-9999'
   Logg12=Logg12(foundmine)
   Logg12[bad]= '-9999'
   FeH12=FeH12(foundmine)
   FeH12[bad]= '-9999'
   alphaFe12=alphaFe12(foundmine)
   alphaFe12[bad]= '-9999'

   APGLocID=APGLocID(foundmine)
   APGLocID[bad]= '-9999'
   CorTeff12=CorTeff12(foundmine)
   CorTeff12[bad]= '-9999'
   CorTeff12err=CorTeff12err(foundmine)
   CorTeff12err[bad]= '-9999'
   CorLogg12=CorLogg12(foundmine)
   CorLogg12[bad]= '-9999'
   CorLogg12err=CorLogg12err(foundmine)
   CorLogg12err[bad]= '-9999'
   CorFeH12=CorFeH12(foundmine)
   CorFeH12[bad]= '-9999'
   CorFeH12err=CorFeH12err(foundmine)
   CorFeH12err[bad]= '-9999'
   CoralphaFe12=CoralphaFe12(foundmine)
   CoralphaFe12[bad]= '-9999'
   CoralphaFe12err=CoralphaFe12err(foundmine)
   CoralphaFe12err[bad]= '-9999'
   CH=CH(foundmine)
   CH[bad]= '-9999'
   CHerr=CHerr(foundmine)
   CHerr[bad]= '-9999'
   OH=OH(foundmine)
   OH[bad]= '-9999'
   OHerr=OHerr(foundmine)
   OHerr[bad]= '-9999'
   NH=NH(foundmine)
   NH[bad]= '-9999'
   NHerr=CHerr(foundmine)
   NHerr[bad]= '-9999'
   FeH2=FeH2(foundmine)
   FeH2[bad]= '-9999'
   FeH2err=FeH2err(foundmine)
   FeH2err[bad]= '-9999'
   RA12=RA12(foundmine)
   RA12[bad]= '-9999'
   DEC12=DEC12(foundmine)
   DEC12[bad]= '-9999'
   PropRAMot12=PropRAMot12(foundmine)
   PropRAMot12[bad]= '-9999'
   PropDecMot12=PropDecMot12(foundmine)
   PropDecMot12[bad]= '-9999'
   KIClogg=KIClogg(foundmine)
   KIClogg[bad]= '-9999'
   KICEBmV12=KICEBmV12(foundmine)
   KICEBmV12[bad]= '-9999'
   Vhelio=Vhelio(foundmine)
   Vhelio[bad]= '-9999'
   Vscatt=Vscatt(foundmine)
   Vscatt[bad]= '-9999'
   print, KICID[0:2], CorFeH12[0:2]
   endif


   match2, KICID, KICIDold, foundmine, findorig
   bad=where(foundmine eq -1)
   Evstate=Evstate(foundmine)
   Evstate[bad]= '-9999'   



;TEFF_COR   TEFF_COR_ERR    LOGG_FIT     LOGG_COR   LOGG_COR_ERR   FE_H_ADOP_COR   FE_H_ADOP_COR_ERR   ALP_FE_ADOP_COR   ALP_FE_ADOP_COR_ERR           AL_H    AL_H_ERR           CA_H    CA_H_ERR            C_H     C_H_ERR           FE_H    FE_H_ERR            K_H     K_H_ERR           MG_H    MG_H_ERR           MN_H    MN_H_ERR           NA_H    NA_H_ERR           NI_H    NI_H_ERR            N_H     N_H_ERR            O_H     O_H_ERR           SI_H    SI_H_ERR            S_H     S_H_ERR           TI_H    TI_H_ERR            V_H     V_H_ERR 

;   readcol2, datafile, skipline=hlines, $
;       KICID3, TMASSID3, APGLocID,RA13, DEC13, PropRAMot13, PropDecMot13, UCACPropRAMot13,UCACPropRAMot13err, UCACPropDecMot13err, UCACPropDecMot13, KICgMag, $
;       KICrMag, KICiMag,KICzMag,TMASSJMag, TMASSJMagerr, TMASSHMag, TMASSHMagerr, $
;       TMASSKMag, TMASSKMagerr, SDSSuMag,SDSSuMagerr, SDSSgMag,SDSSgMagerr,$
;       SDSSrMag,SDSSrMagerr, SDSSiMag,SDSSiMagerr, SDSSzMag,SDSSzMagerr, SDSSgMagPin,SDSSgMagPinerr,$
;       SDSSrMagPin,SDSSrMagPinerr, SDSSiMagPin,SDSSiMagPinerr, SDSSzMagPin,SDSSzMagPinerr,Wise45, Wise45err, KICMag,$
;       KICTeff, $
;       KIClogg, KICFeH,KICEBmV12,TeffSDSS, TeffSDSSerr, TeffCasa, TeffCasaerr, $
;
;	Teff10, CorTeff10, CorTeff10err, Teff210, CorTeff210, CorTeff210err,$
;       Logg10, CorLogg10, CorLogg10err, FeH10, CorFeH10, CorFeH10err, numaxChap, numaxChaperr, delnuChap, delnuChaperr, 
;       numaxRG, numaxRGerr, $ 
;       SeisMS1RG, SeisMS1RGperr, SeisMS1RGmerr, SeisRS1RG, SeisRS1RGperr, SeisRS1RGmerr, $
;       SeisLoggS1RG, SeisLoggS1RGperr, SeisLoggS1RGmerr, SeisRhoS1RG, SeisRhoS1RGperr, SeisRhoS1RGmerr, $
;       SeisMS2RG, SeisMS2RGperr, SeisMS2RGmerr, SeisRS2RG, SeisRS2RGperr, SeisRS2RGmerr, $
;       SeisLoggS2RG, SeisLoggS2RGperr, SeisLoggS2RGmerr, SeisRhoS2RG, SeisRhoS2RGperr, SeisRhoS2RGmerr, $
;       PreSeisLoggDw, PreSeisLoggDwerr,delnuDw, delnuDwerr, numaxDw, numaxDwerr, $
;       SeisMS1DW, SeisMS1DWperr, SeisMS1DWmerr, SeisRS1DW, SeisRS1DWperr, SeisRS1DWmerr, $
;       SeisLoggS1DW, SeisLoggS1DWperr, SeisLoggS1DWmerr, SeisRhoS1DW, SeisRhoS1DWperr, SeisRhoS1DWmerr, $
;       SeisMS2DW, SeisMS2DWperr, SeisMS2DWmerr, SeisRS2DW, SeisRS2DWperr, SeisRS2DWmerr, $
;       SeisLoggS2DW, SeisLoggS2DWperr, SeisLoggS2DWmerr, SeisRhoS2DW, SeisRhoS2DWperr, SeisRhoS2DWmerr, $

;       ASPCAPchi2, SNR, Vhelio, Vscatt, Teff12, CorTeff12, CorTeff12err, $
;       Logg12, CorLogg12, CorLogg12err, FeH12, CorFeH12, CorFeH12err, alphaFe12, CoralphaFe12, CoralphaFe12err, AlH, AlHerr, CaH, CaHerr, CH, CHerr, $
;       FeH2, FeH2err, KH, KHerr, MgH, MgHerr, MnH, MnHerr, NaH, NaHerr, NH, $
;       NHerr,  OH, OHerr, SiH, SiHerr, SH, SHerr, TiH, TiHerr, VH, VHerr, $
;FORMAT="A,X,A,I,F,F,F,F,F,F, F,F,F,F,F,F,F, F,F,F,F,F,F,
;F,F,F,F,F,F,F,F, F,F,F,F,F,F,F,F,F, F, F,F,F,F,F,F,F,  F,X,X,X,X,X,X,X,X,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F"
;
;    Z_SDSS_PIN   Z_SDSS_PIN_ERR    WISE4_5   WISE4_5_ERR   KEP_MAG   KIC_TEFF   KIC_LOGG   KIC_FEH   KIC_EBMV   TEFF_SDSS   TEFF_SDSS_ERR   TEFF_IRFM   TEFF_IRFM_ERR   DR10_TEFF_FIT   DR10_TEFF_COR   DR10_TEFF_COR_ERR   DR10_TEFF_S2   DR10_LOGG_FIT   DR10_LOGG_COR   DR10_LOGG_COR_ERR   DR10_FE_H_FIT   DR10_FE_H_COR   DR10_FE_H_COR_ERR   CHAPLIN_NU_MAX   CHAPLIN_NU_MAX_ERR   CHAPLIN_DELTA_NU   CHAPLIN_DELTA_NU_ERR   CHAPLIN_LOGG   CHAPLIN_LOGG_PERR   CHAPLIN_LOGG_MERR   DR10_DELTA_NU   DR10_DELTA_NU_ERR   DR10_NU_MAX   DR10_NU_MAX_ERR   DR10_S1_MASS   DR10_S1_MASS_PERR   DR10_S1_MASS_MERR   DR10_S2_MASS   DR10_S2_MASS_PERR   DR10_S2_MASS_MERR   DR10_S1_RADIUS   DR10_S1_RADIUS_PERR   DR10_S1_RADIUS_MERR   DR10_S2_RADIUS   DR10_S2_RADIUS_PERR   DR10_S2_RADIUS_MERR   DR10_S1_LOGG   DR10_S1_LOGG_PERR   DR10_S1_LOGG_MERR   DR10_S2_LOGG   DR10_S2_LOGG_PERR   DR10_S2_LOGG_MERR   DR10_S1_DENSITY   DR10_S1_DENSITY_PERR   DR10_S1_DENSITY_MERR   DR10_S2_DENSITY   DR10_S2_DENSITY_PERR   DR10_S2_DENSITY_MERR   DR12_TEFF_FIT   DR12_TEFF_COR   DR12_TEFF_COR_ERR   DR12_LOGG_FIT   DR12_LOGG_COR   DR12_LOGG_COR_ERR   DR12_FE_H_ADOP_FIT   DR12_FE_H_ADOP_COR   DR12_FE_H_ADOP_COR_ERR   DR12_ALP_FE_ADOP_FIT   DR12_ALP_FE_ADOP_COR   DR12_ALP_FE_ADOP_COR_ERR      DR12_AL_H   DR12_AL_H_ERR      DR12_CA_H   DR12_CA_H_ERR       DR12_C_H   DR12_C_H_ERR      DR12_FE_H   DR12_FE_H_ERR       DR12_K_H   DR12_K_H_ERR      DR12_MG_H   DR12_MG_H_ERR      DR12_MN_H   DR12_MN_H_ERR      DR12_NA_H   DR12_NA_H_ERR      DR12_NI_H   DR12_NI_H_ERR       DR12_N_H   DR12_N_H_ERR       DR12_O_H   DR12_O_H_ERR      DR12_SI_H   DR12_SI_H_ERR       DR12_S_H   DR12_S_H_ERR      DR12_TI_H   DR12_TI_H_ERR       DR12_V_H   DR12_V_H_ERR   ASPCAP_CHI2   ASPCAP_SNR    VHELIO_AVG      VSCATTER   TEFF_FIT   TEFF_COR   TEFF_COR_ERR    LOGG_FIT     LOGG_COR   LOGG_COR_ERR   FE_H_ADOP_COR   FE_H_ADOP_COR_ERR   ALP_FE_ADOP_COR   ALP_FE_ADOP_COR_ERR           AL_H    AL_H_ERR           CA_H    CA_H_ERR            C_H     C_H_ERR           FE_H    FE_H_ERR            K_H     K_H_ERR           MG_H    MG_H_ERR           MN_H    MN_H_ERR           NA_H    NA_H_ERR           NI_H    NI_H_ERR            N_H     N_H_ERR            O_H     O_H_ERR           SI_H    SI_H_ERR            S_H     S_H_ERR           TI_H    TI_H_ERR            V_H     V_H_ERR   VSINI_JT   VSINI_JT_ERR   TEFF_ROT_FIT   TEFF_ROT_FIT_ERR   FE_H_ADOP_ROT_FIT   FE_H_ADOP_ROT_FIT_ERR   ALPHA_FE_ADOP_ROT_FIT   ALPHA_FE_ADOP_ROT_FIT_ERR   NU_MAXDW   NU_MAXDW_STERR   NU_MAXDW_SYSERR   NU_MAXDW_TOTERR   DELTA_NUDW   DELTA_NUDW_STERR   DELTA_NUDW_SYSERR   DELTA_NUDW_TOTERR   NU_MAXRG   NU_MAXRG_ERR   NU_MAXRG_RANGE    LOGGRG   F8_LOGG   F8_LOGG_PERR   F8_LOGG_MERR   CHAPLIN   VANSADERS   ELSWORTH   STELLO_EVSTATES   MOSSER_EVSTATES   N_KEP_QUART   CONSEC_3_QUART            OBS_QUART                                                                             TARGFLAGS                                                                                                                 ASPCAPFLAGS  


   readcol2, '~/Documents/Apogee/myvsinis.dat', skipline=1, KICIDmine, TMASSIDmine, vsini1mine, vsini2mine, vsini3mine, vsinimine, vsinimineerr, FORMAT="A,A,F,F,F,F,F"

   match2, KICID, KICIDmine, foundmine, findorig
   bad=where(foundmine eq -1)
   KICIDmine=KICIDmine(foundmine)
   KICIDmine[bad]= '-9999'
   TMASSIDmine=TMASSIDmine(foundmine)
   TMASSIDmine[bad]= '-9999'
   vsini1mine=vsini1mine(foundmine)
   vsini1mine[bad]= '-9999'
   vsini2mine=vsini2mine(foundmine)
   vsini2mine[bad]= '-9999'
   vsini3mine=vsini3mine(foundmine)
   vsini3mine[bad]= '-9999'
   vsinimine=vsinimine(foundmine)
   vsinimine[bad]= '-9999'
   vsinimineerr=vsinimineerr(foundmine)
   vsinimineerr[bad]= '-9999'
   bad=where(vsini1mine eq 72 or vsini2mine eq 72 or vsini3mine eq 72)
   if bad[0] ne -1 then begin
   vsinimine[bad]= '-9999'
   vsinimineerr[bad]= '-9999'
   endif

   readcol2, '~/Documents/Apogee/dr12vsinis.dat', skipline=1, KICIDmine, TMASSIDmine, vsini1mine, vsini2mine, vsini3mine, vsinimine12, vsinimine12err, FORMAT="A,A,F,F,F,F,F"

   match2, KICID, KICIDmine, foundmine, findorig
   bad=where(foundmine eq -1)
   KICIDmine=KICIDmine(foundmine)
   KICIDmine[bad]= '-9999'
   TMASSIDmine=TMASSIDmine(foundmine)
   TMASSIDmine[bad]= '-9999'
   vsini1mine=vsini1mine(foundmine)
   vsini1mine[bad]= '-9999'
   vsini2mine=vsini2mine(foundmine)
   vsini2mine[bad]= '-9999'
   vsini3mine=vsini3mine(foundmine)
   vsini3mine[bad]= '-9999'
   vsinimine12=vsinimine12(foundmine)
   vsinimine12[bad]= '-9999'
   vsinimine12err=vsinimine12err(foundmine)
   vsinimine12err[bad]= '-9999'
   bad=where(vsini1mine eq 72 or vsini2mine eq 72 or vsini3mine eq 72 or vsinimine12err ge vsinimine12)
   if bad[0] ne -1 then begin
   vsinimine12[bad]= '-9999'
   vsinimine12err[bad]= '-9999'
   endif

   readcol2, '~/Documents/Apogee/vsinidr13avg.txt',  skipline=1,  KICIDmine13,TMASSIDmine, vsini1mine13, vsini2mine13, vsini3mine13, vsinimine13, vsinimine13err, vsinimine13cor, format='A,A,F,F,F,F,F,F'

   match2, KICID, KICIDmine13, foundmine, findorig
   bad=where(foundmine eq -1)
   KICIDmine13=KICIDmine13(foundmine)
   KICIDmine13[bad]= '-9999'
   vsini1mine13=vsini1mine13(foundmine)
   vsini1mine13[bad]= '-9999'
   vsini2mine13=vsini2mine13(foundmine)
   vsini2mine13[bad]= '-9999'
   vsini3mine13=vsini3mine13(foundmine)
   vsini3mine13[bad]= '-9999'
   vsinimine13=vsinimine13(foundmine)
   vsinimine13[bad]= '-9999'
   vsinimine13cor=vsinimine13cor(foundmine)
   vsinimine13cor[bad]= '-9999'
   vsinimine13err=vsinimine13err(foundmine)
   vsinimine13err[bad]= '-9999'
   bad=where(vsini1mine eq 72 or vsini2mine eq 72 or vsini3mine eq 72 or vsinimine13err ge vsinimine13)
   if bad[0] ne -1 then begin
   vsinimine13[bad]='-9999'
   vsinimine13cor[bad]= '0'
   vsinimine13err[bad]= '0'
   endif
;currently, if I have a good measurement then the corrected value is mine+APG. If i have a bad measurement (72) or no measurement (2), the corrected value is the APG value

  readcol2, '~/Documents/Apogee/nicksvsall.txt', tmassN, TeffN, loggN, vmicroN, FeHN, CFeN, NFeN, alphaFeN, vsiniN, FORMAT='A,F,F,F,F,F,F,F,F'
   match2, TMASSID, tmassN, foundmine, findorig
   vsiniN=10.0^vsiniN
   print, tmassN[0], TeffN[0], vsiniN[0]
;   print, TMASSID2[1], tmassN[1]
;wait, 100
   bad=where(foundmine eq -1)
   TeffN=TeffN(foundmine)
   TeffN[bad]= '-9999'
   vmicroN=vmicroN(foundmine)
   vmicroN[bad]= '-9999'
   FeHN=FeHN(foundmine)
   FeHN[bad]= '-9999'
   CFeN=CFeN(foundmine)
   CFeN[bad]= '-9999'
   NFeN=NFeN(foundmine)
   NFeN[bad]= '-9999'
   alphaFeN=alphaFeN(foundmine)
   alphaFeN[bad]= '-9999'
   vsiniN=vsiniN(foundmine)
   vsiniN[bad]= '-9999'
   print, tmassN[0], TeffN[0], vsiniN[0]

;   readcol2, '~/Documents/Apogee/TugdualApr28.txt', skipline=1, KICIDT, ProtT12, ProtT12err, numaxT12b, numaxT12berr, delnuT12b, delnuT12berr, $ 
;       flaga2zb,  FORMAT='A,F,F,F,F,F,F,I'
   readcol2, '~/Documents/Apogee/T12RG_paper_table.txt', skipline=2, KICIDT,  numaxT12b, numaxT12berr, delnuT12b, delnuT12berr, TeffT12,TeffT12err,$
         ProtT12, ProtT12err, crowdingT12, T_critT12, flagT12,   FORMAT='A,F,F,F,F,F,F,F,F,F,F,I'
   T12final=KICIDT
   match2, KICID, KICIDT, foundmine, findorig

;   print,'KICMATCH',  n_elements(where(foundmine ne -1))
;   print, 'good seismo', n_elements(where(numaxT12 gt 0 and findorig ne -1))
   flagT12=flagT12(foundmine)
   bad=where(foundmine eq -1)
   flagT12[bad]='-9999'
   
   bad=where(foundmine eq -1 or flagT12 ne 0)
   KICIDT=KICIDT(foundmine)
   KICIDT[bad]= '-9999'
   num=where(SeisDataflag eq 0 and flagT12 gt -9998)
   SeisDataflag[num]=9

   ProtT12=ProtT12(foundmine)
   ProtT12allbad=ProtT12

   allbad=where(foundmine eq -1)
   ProtT12allbad[allbad]='-9999'

   ProtT12[bad]= '-9999'
   ProtT12err=ProtT12err(foundmine)
   ProtT12err[bad]= '-9999'
   numaxT12b=numaxT12b(foundmine)
   numaxT12b[bad]= '-9999'
   numaxT12berr=numaxT12berr(foundmine)
   numaxT12berr[bad]= '-9999'
   delnuT12b=delnuT12b(foundmine)
   delnuT12b[bad]= '-9999'
   delnuT12berr=delnuT12berr(foundmine)
   delnuT12berr[bad]= '-9999'
   flagT12=flagT12(foundmine)
   flagT12[bad]= '-9999'
   TeffT12=TeffT12(foundmine)
   TeffT12[bad]='-9999'
   TeffT12err=TeffT12err(foundmine)
   TeffT12err[bad]='-9999'


 numaxT12g= numaxT12b
 numaxT12errg=numaxT12berr
delnuT12g=delnuT12b
 delnuT12errg=delnuT12berr



;replace preliminary savita with polished T12
good=where( numaxT12g ne -9999 )
 numaxT12[good]= numaxT12g[good]
 numaxT12err[good]=numaxT12errg[good]
delnuT12[good]=delnuT12g[good]
 delnuT12err[good]=delnuT12errg[good]

;bad= where(numaxT12 eq -1)
;   numaxT12[bad]= '-9999'
;   numaxT12err[bad]= '-9999'
;   delnuT12[bad]= '-9999'
;   delnuT12err[bad]= '-9999'


;   readcol2, '~/Documents/Apogee/TugdualApr28can.txt', skipline=1, KICIDTc, ProtT12c, ProtT12cerr, numaxT12b, numaxT12berr, delnuT12b, delnuT12berr, $ 
;       flaga2zb,  FORMAT='A,F,F,F,F,F,F,I'
;   T12can=KICIDTc
;   match2, KICID, KICIDTc, foundmine, findorig

;;   print,'KICMATCH',  n_elements(where(foundmine ne -1))
;;   print, 'good seismo', n_elements(where(numaxT12 gt 0 and findorig ne -1))
;   bad=where(foundmine eq -1)
;   KICIDT=KICIDT(foundmine)
;   KICIDT[bad]= '-9999'
;   ProtT12[findorig]=ProtT12c
;   ProtT12[bad]= '-9999'
;   ProtT12err[findorig]=ProtT12cerr
;   ProtT12err[bad]= '-9999'
;   numaxT12b=numaxT12b(foundmine)
;   numaxT12b[bad]= '-9999'
;   numaxT12berr=numaxT12berr(foundmine)
;   numaxT12berr[bad]= '-9999'
;   delnuT12b=delnuT12b(foundmine)
;   delnuT12b[bad]= '-9999'
;   delnuT12berr=delnuT12berr(foundmine)
;   delnuT12berr[bad]= '-9999'
;   flaga2zb=flaga2zb(foundmine)
;   flaga2zb[bad]= '-9999'
 

; numaxT12g= numaxT12b
; numaxT12errg=numaxT12berr
;delnuT12g=delnuT12b
; delnuT12errg=delnuT12berr

;bad=where(ProtT12err eq -1)
;ProtT12err[bad]='-9999'

;replace preliminary savita with polished T12
good=where( numaxT12g gt 0 )
 numaxT12[good]= numaxT12g[good]
 numaxT12err[good]=numaxT12errg[good]
delnuT12[good]=delnuT12g[good]
 delnuT12err[good]=delnuT12errg[good]


   readcol2, '~/Documents/Apogee/apokasc_dist_bayesian_mode.txt', skipline=1, KICIDdist, distance,distlc, distuc, FORMAT="X,A,X,X,X,F,F,F"
   distanceerr=(distuc-distlc)/2.0
   match2, KICID, KICIDdist, foundmine, findorig

   bad=where(foundmine eq -1)
   KICIDdist=KICIDdist(foundmine)
   KICIDdist[bad]= '-9999'
   distance=distance(foundmine)
   distance[bad]= '-9999'
   distanceerr=distanceerr(foundmine)
   distanceerr[bad]= '-9999'

   readcol2, '~/Documents/Apogee/McQuillan_Periodic.txt', skipline=1, KICIDMc, ProtMc, ProtMcerr, AmpMc, LPHMc, weightMc, FORMAT="A,X,X,X,F,F,F,F,F"
   match2, KICID, KICIDMc, foundmine, findorig

   bad=where(foundmine eq -1)
   KICIDMc=KICIDMc(foundmine)
   KICIDMc[bad]= '-9999'
   ProtMc=ProtMc(foundmine)
   ProtMc[bad]= '-9999'
   num=where(SeisDataflag eq 0 and ProtMc gt -9998)
   SeisDataflag[num]=9
   ProtMcerr=ProtMcerr(foundmine)
   ProtMcerr[bad]= '-9999'
   AmpMc=AmpMc(foundmine)
   AmpMc[bad]= '-9999'
   LPHMc=LPHMc(foundmine)
   LPHMc[bad]= '-9999'
   weightMc=weightMc(foundmine)
   weightMc[bad]= '-9999'
;   wait, 100

;   readcol2, '~/Documents/Apogee/Pin2012.tsv', skipline=46, delimiter=';',KICIDP12, P12Teff, P12Tefferr, FORMAT="A,F,F"
 readcol2, '~/Documents/Apogee/HuberTeffs.txt', skipline=45,KICIDP12, P12Teff, P12Tefferr, FORMAT="A,F,F"
   match2, KICID, KICIDP12, foundmine, findorig

   bad=where(foundmine eq -1)
   KICIDP12=KICIDP12(foundmine)
   KICIDP12[bad]= '-9999'
   P12Teff=P12Teff(foundmine)
   P12Teff[bad]= '-9999'
   P12Tefferr=P12Tefferr(foundmine)
   P12Tefferr[bad]= '-9999'

 readcol2, '~/Documents/Apogee/Huber2014MR.txt', skipline=47, KICIDH14, H14R, H14Rperr, H14Rmerr, H14M, H14Mperr, H14Mmerr,FORMAT="A,F,F,F,F,F,F"
   match2, KICID, KICIDH14, foundmine, findorig

   bad=where(foundmine eq -1)
   KICID414=KICIDH14(foundmine)
   KICIDH14[bad]= '-9999'
   H14R=H14R(foundmine)
   H14R[bad]= '-9999'
   H14Rperr=H14Rperr(foundmine)
   H14Rperr[bad]= '-9999'
   H14Rmerr=H14Rmerr(foundmine)
   H14Rmerr[bad]= '-9999'
   H14M=H14M(foundmine)
   H14M[bad]= '-9999'
   H14Mperr=H14Mperr(foundmine)
   H14Mperr[bad]= '-9999'
   H14Mmerr=H14Mmerr(foundmine)
   H14Mmerr[bad]= '-9999'


;replace preliminary huber with polished T12
good=where( TeffT12 ne -9999 )
 P12Teff[good]= TeffT12[good]
 P12Tefferr[good]= TeffT12err[good]

   readcol2, '~/Documents/Apogee/apogee_kepler_best_vsini_dmitry.dat', skipline=1, KICd,Filed,  RVd,  Taspd, lggd, microd,  MHd,  alMd, $
		Typed,Fieldd,SNRd,Widthd, Peak1d,Vs1d, dVs1d,Peak2d,Vs2d,dVs2d,Peak3d, Vs3d,dVs3d,Peak4d, Vs4d,dVs4d, Peak5d, $
		Vs5d,dVs5d,Peak_bestd,Vs_bestd, Vs_bestderr, FORMAT="A,A,F,F,F,F,F,F,A,A,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F"
   match2, KICID, KICd, foundmine, findorig
   bad=where(foundmine eq -1)
   KICd=KICd(foundmine)
   KICd[bad]= '-9999'
   Vs_bestd=Vs_bestd(foundmine)
   Vs_bestd[bad]= '-9999'
   Vs_bestderr=Vs_bestderr(foundmine)
   Vs_bestderr[bad]= '-9999'

   readcol2, '~/Documents/Apogee/evstates_Benoit.txt', KICB,Bevstate, FORMAT='A,A'
   match2, KICID, KICB, foundB, foundorig

   bad=where(foundB eq -1)
   KICb=KICB(foundB)
   KICb[bad]= '-9999'
   Bevstate=Bevstate(foundB)
   Bevstate[bad]= '-9999'

   readcol2, '~/Documents/Apogee/Mosser2014evstates.txt', KICB2,dnuB,dnuBerr, dpiB, dpiBerr, Bevstate2, massB, massBerr, FORMAT='A,F,F,F,F,A,F,F'
   KICB2=strcompress(KICB2, /remove_all)
   Bevstate2=strcompress(Bevstate2, /remove_all)
   match2, KICID, KICB2, foundB2, foundorig
   
   bad=where(foundB2 eq -1)
   KICB2=KICB2(foundB2)
   KICB2[bad]= '-9999'
   dnuB=dnuB(foundB2)
   dnuB[bad]= '-9999'
   dnuBerr=dnuBerr(foundB2)
   dnuBerr[bad]= '-9999'
   dpiB=dpiB(foundB2)
   dpiB[bad]= '-9999'
   dpiBerr=dpiBerr(foundB2)
   dpiBerr[bad]= '-9999'
   Bevstate2=Bevstate2(foundB2)
   Bevstate2[bad]= '-9999'
   massB=massB(foundB2)
   massB[bad]= '-9999'
   massBerr=massBerr(foundB2)
   massBerr[bad]= '-9999'



   readcol2, '~/Documents/Apogee/Stello2013evstates.txt', KICS2,dnuS,dpiS, massS, Sevstate2,  FORMAT='A,F,F,F,A'
   KICS2=strcompress(KICS2, /remove_all)
   Sevstate2=strcompress(Sevstate2, /remove_all)
   match2, KICID, KICS2, foundS2, foundorig
   
   bad=where(foundS2 eq -1)
   KICS2=KICS2(foundS2)
   KICS2[bad]= '-9999'
   dnuS=dnuS(foundS2)
   dnuS[bad]= '-9999'
   dpiS=dpiS(foundS2)
   dpiS[bad]= '-9999'
   Sevstate2=Sevstate2(foundS2)
   Sevstate2[bad]= '-9999'
   massS=massS(foundS2)
   massS[bad]= '-9999'

   readcol2, '~/Documents/Apogee/apokasc_DR01.dat', KIC1,numaxprelim, FORMAT='A,F'
   match2, KICID, KIC1, found1, foundorig

   bad=where(found1 eq -1)
   KIC1=KIC1(found1)
   KIC1[bad]= '-9999'
   numaxprelim=numaxprelim(found1)
   numaxprelim[bad]= '-9999'

   readcol2, '~/Documents/Apogee/thygesenvalues.dat', KICT, TeffT, FeHT, xiT, vsiniT, vmacroT,RVT, Tevstate, $  
               FORMAT='A,F,F,F,F,F,F,A'
   match2, KICID, KICT, foundT, foundorig

   bad=where(foundT eq -1)
   KICt=KICT(foundT)
   KICt[bad]= '-9999'
   TeffT=TeffT(foundT)
   TeffT[bad]= '-9999'
   FeHT=FeHT(foundT)
   FeHT[bad]= '-9999'
   xiT=xiT(foundT)
   xiT[bad]= '-9999'
   vsiniT=vsiniT(foundT)
   vsiniT[bad]= '-9999'
   vmacroT=vmacroT(foundT)
   vmacroT[bad]= '-9999'
   RVT=RVT(foundT)
   RVT[bad]= '-9999'
   Tevstate=Tevstate(foundT)
   Tevstate[bad]= '-9999'


   readcol2, '~/Documents/Apogee/bcrit_dennis4.dat', KICBcr,MassD, l1sup, logBcrit, FORMAT='A,X,X,F,F,F' ;
   match2, KICID, KICBcr, foundBcr, foundorig

   bad=where(foundBcr eq -1)
   KICBcr=KICBcr(foundBcr)
   KICBcr[bad]= '-9999'
   l1sup=1.0*l1sup(foundBcr)
   l1sup[bad]='-9999'
   logBcrit=logBcrit(foundBcr)
   logBcrit[bad]='-9999'
   MassD=MassD(foundBcr)
   MassD[bad]='-9999.'
;  print, l1sup(0:5), 'l1sup'

   readcol2, '~/Documents/Apogee/vis_vs_numax.dat', KICDvis,l1vis2, maxl0power, FORMAT='A,X,X,F,X,X,F' ;
   match2, KICID, KICDvis, foundBcr, foundorig

   bad=where(foundBcr eq -1)
   KICDvis=KICDvis(foundBcr)
   KICDvis[bad]= '-9999'
   l1vis2=l1vis2(foundBcr)
   l1vis2[bad]='-9999'
   maxl0power=maxl0power(foundBcr)
   maxl0power[bad]='-9999'

   readcol2, '~/Documents/Apogee/brunttdata.dat', KICBr, xiBr, vsiniBr, FORMAT='A,F,F'
   match2, KICID, KICBr, foundBr, foundorig

   bad=where(foundBr eq -1)
   KICBr=KICBr(foundBr)
   KICBr[bad]= '-9999'
   xiBr=xiBr(foundBr)
   xiBr[bad]= '-9999'
   vsiniBr=vsiniBr(foundBr)
   vsiniBr[bad]= '-9999'

   readcol2, '~/Documents/Apogee/mlfitprelimKurucz.dat', KICml, mixinglength, FORMAT='A,F'
   match2, KICID, KICml, foundml, foundorig

   bad=where(foundml eq -1)
   KICml=KICml(foundml)

   mixinglength=mixinglength(foundml)


   readcol2, '~/Documents/Apogee/evstates_Stello.txt', KICS,Sevstate, FORMAT='A,A'
   match2, KICID, KICS, foundS, foundorig

   bad=where(foundS eq -1)
   KICs=KICS(foundS)
   KICs[bad]= '-9999'
   Sevstate=Sevstate(foundS)
   Sevstate[bad]= '-9999'

   readcol2, '~/Documents/Apogee/likelyclumpYREC.txt', KICclump, FORMAT='A'
   match2, KICID, KICclump, foundB, foundorig

   good=where(foundB ne -1)
   YRECevstate=CorTeff*0-9999.0

   YRECevstate[good]= 2.3

   readcol2, '~/Documents/Apogee/likelyRGBYREC.txt', KICRGB, FORMAT='A'
   match2, KICID, KICRGB, foundB, foundorig

   good=where(foundB ne -1)
   YRECevstate[good]= 2.8

   readcol2, '~/Documents/Apogee/CeillierPeriods.txt', KICcei, ProtC, ProtCerr, DnuS, DnuSerr, numaxS, numaxSerr, TeffS, SeisLoggS, SeisLoggSperr,$
             SeisLoggSmerr, SeisRS, SeisRSerr, SeisMS, SeisMSerr , FORMAT='A,F,F,F,F,F,F,F,F,F,F,F,F,F,F'
   match2, KICID, KICcei, foundC, foundorig

   bad=where(foundC eq -1)
   KICcei=KICcei(foundC)
   KICcei[bad]= '-9999'
   ProtC=ProtC(foundC)
   ProtC[bad]= '-9999'
   ProtCerr=ProtCerr(foundC)
   ProtCerr[bad]= '-9999'
   DnuS=DnuS(foundC)
   DnuS[bad]= '-9999'
   DnuSerr=DnuSerr(foundC)
   DnuSerr[bad]= '-9999'
   numaxS=numaxS(foundC)
   numaxS[bad]= '-9999'
   numaxSerr=numaxSerr(foundC)
   numaxSerr[bad]= '-9999'
   TeffS=TeffS(foundC)
   TeffS[bad]= '-9999'
   SeisLoggS=SeisLoggS(foundC)
   SeisLoggS[bad]= '-9999'
   SeisLoggSperr=SeisLoggSperr(foundC)
   SeisLoggSperr[bad]= '-9999'
   SeisLoggSmerr=SeisLoggSmerr(foundC)
   SeisLoggSmerr[bad]= '-9999'
   SeisRS=SeisRS(foundC)
   SeisRS[bad]= '-9999'
   SeisRSerr=SeisRSerr(foundC)
   SeisRSerr[bad]= '-9999'
   SeisMS=SeisMS(foundC)
   SeisMS[bad]= '-9999'
   SeisMSerr=SeisMSerr(foundC)
   SeisMSerr[bad]= '-9999'

   readcol2, '~/Documents/Apogee/macrorapidanomtest1.txt', KICm,macroft, macrogf,  FORMAT='A,F,F'
   match2, KICID, KICm, foundf, foundorig

   bad=where(foundf eq -1)
   KICm=KICm(foundf)
   KICm[bad]= '-9999'
   macroft=macroft(foundf)
   macroft[bad]= '-9999'
   macrogf=macrogf(foundf)
   macrogf[bad]= '-9999'

   readcol2, '~/Documents/Apogee/OCT_KASOCv1TS_jamie.res', KICo,aldoOCTSeisM, aldoOCTSeisMerr,  FORMAT='A,X,X,X,X,X,X,X,X,F,F'
   match2, KICID, KICo, foundf, foundorig

   bad=where(foundf eq -1)
   KICo=KICo(foundf)
   KICo[bad]= '-9999'
   aldoOCTSeisM=aldoOCTSeisM(foundf)
   aldoOCTSeisM[bad]= '-9999'
   aldoOCTSeisMerr=aldoOCTSeisMerr(foundf)
   aldoOCTSeisMerr[bad]= '-9999'

;   print, 'mass check ',  KICID(0:2), aldoOCTSeisM(0:2), OCTSeisMscale(0:2), OCTSeisMscalecor(0:2)

   readcol2, '~/Documents/Apogee/tayar.raprot.flicker.out', KICf,FlickLogg,  FlickLoggerr, FORMAT='A,X,X,F,F,X'
   match2, KICID, KICf, foundf, foundorig

   bad=where(foundf eq -1)
   KICf=KICf(foundf)
   KICf[bad]= '-9999'
   FlickLogg=FlickLogg(foundf)
   FlickLogg[bad]= '-9999'
   CorFlickLoggerr=FlickLoggerr(foundf)
   FlickLoggerr=FlickLoggerr(foundf)
   CorFlickLoggerr[bad]= '-9999'
   FlickLoggerr[bad]='-9999'
   CorFlickLogg=FlickLogg
   bad=where((SeisLoggS2RG lt 2.5 and SeisLoggS2RG gt 0) or KICMag gt 13.0 or KICID eq '2285032' or KICID eq '4473933')
   CorFlickLogg[bad]='-9999'
   CorFlickLoggerr[bad]='-9999'


   readcol2, '~/Documents/Apogee/Bastien2016.txt', KICbas,kpmagf,loggf, loggfperr, loggfmerr, rangefl, rmsfl,  FORMAT='A,F,F, F, F, F,F'
   match2, KICID, KICbas, foundf, foundorig

   bad=where(foundf eq -1)
   KICbas=KICbas(foundf)
   KICbas[bad]= '-9999'
   kpmagf=kpmagf(foundf)
   kpmagf[bad]= '-9999'
   loggf=loggf(foundf)
   loggf[bad]= '-9999'
   loggfperr=loggfperr(foundf)
   loggfperr[bad]= '-9999'
   loggfmerr=loggfmerr(foundf)
   loggfmerr[bad]= '-9999'
   rangefl=rangefl(foundf)
   rangefl[bad]= '-9999'
   rmsfl=rmsfl(foundf)
   rmsfl[bad]= '-9999'
;   gflick=where(kpmagf gt -9000 and rmsfl gt -9000)
;   F8=0.0*rmsfl-9999
;   calcloggf8=0.0*rmsfl-9999
;   min1f8=0.0*rmsfl-9999
;   min2f8=0.0*rmsfl-9999
;   min1f8=-0.03910-0.67187*kpmagf+0.06839*kpmagf*kpmagf-0.001755*kpmagf*kpmagf*kpmagf
;   min2f8=-56.68072+29.62420*kpmagf-6.30070*kpmagf^2.+0.65329*kpmagf^3.-0.03298*kpmagf^4.+0.00065*kpmagf^5
;   F8[gflick]=sqrt(rmsfl[gflick]^2.-(10.^min1f8[gflick])^2.-(10^min2f8[gflick])^2.)
;   calcloggf8[gflick]=1.3724221-3.5002686*Alog10(F8[gflick])-1.6838185*(ALOG10(F8[gflick]))^2.-0.37909094*(ALOG10(F8[gflick]))^3.
 
   readcol2, '~/Documents/Apogee/flicker/all_f8_f2.txt', KICke,F8, F8err, F2, F2err,  FORMAT='A,F,F, F, F'
   match2, KICID, KICke, foundf, foundorig

   bad=where(foundf eq -1)
   KICke=KICke(foundf)
   KICke[bad]= '-9999'
   F8=F8(foundf)
   F8[bad]= '-9999'
   F8err=F8err(foundf)
   F8err[bad]= '-9999'
   F2=F2(foundf)
   F2[bad]= '-9999'
   F2err=F2err(foundf)
   F2err[bad]= '-9999'

   calcloggf8=0.0*rmsfl-9999
   gflick=where(F8  gt 0)
   calcloggf8[gflick]=1.3724221-3.5002686*Alog10(F8[gflick])-1.6838185*(ALOG10(F8[gflick]))^2.-0.37909094*(ALOG10(F8[gflick]))^3.


   F8seismass=dwarfmass
   F8seismasserr=dwarfmasstoterr
   F8seislogg=dwarflogg
   F8numax=dwarfnumax
   F8numaxerr=dwarfnumaxerr
   sydrgb=where(EMPSeisMscale gt 0 and (CEvstates eq 3 or CEvstates eq 2 or CEvstates eq 1))
   F8seismasserr[sydrgb]=EMPSeisMscaleerr[sydrgb]
   F8seismass[sydrgb]=EMPSeisMscale[sydrgb]
   F8seislogg[sydrgb]=EMPSeisLoggscale[sydrgb]
   F8numax[sydrgb]=EMPnumax[sydrgb]
   F8numaxerr[sydrgb]=EMPnumaxerr[sydrgb]

;   F8teff=CorTeff13
;   F8tefferr=CorTeff13err
;   dwarft=where(CorTeff13 eq -9999 and Teff13 gt -9999)
;   F8teff[dwarft]=Teff13[dwarft]
;   F8tefferr[dwarft]=70

   F8teff14=CorTeff14
   F8teff14err=CorTeff14err
   dwarft=where(CorTeff14 eq -9999 and Teff14 gt -9999)
   F8teff14[dwarft]=Teff14[dwarft]
   F8teff14err[dwarft]=70

   F8logg=CorLogg16
   F8loggerr=CorLogg16err
   dwarft=where(CorLogg16 eq -9999 and Logg16 gt -9999)
   F8logg[dwarft]=Logg16[dwarft]
   F8loggerr[dwarft]=.1 ; random number I made up larger than most of giants by ~ factor of 1.5

   F8logg14=CorLogg14
   F8logg14err=CorLogg14err
   dwarft=where(CorLogg14 eq -9999 and Logg14 gt -9999)
   F8logg14[dwarft]=Logg14[dwarft]
   F8logg14err[dwarft]=.1 ; random number I made up larger than most of giants by ~ factor of 1.5

;   F8feh=CorFeH13
;   F8feherr=CorFeH13err
;   dwarft=where(CorFeH13 eq -9999 and FeH13 gt -9999)
;   F8feh[dwarft]=FeH13[dwarft]
;   F8feherr[dwarft]=.025  ;median for the sample
;   dwarft=where(dwarfnumax gt -9999)
;   F8feherr[dwarft]=sqrt(F8feherr[dwarft]^2.+.01) ; Serenelli et all,  bumped it up by .1 dex in quadrature

   F8feh14=CorFeH14
   F8feh14err=CorFeH14err
   dwarft=where(CorFeH14 eq -9999 and FeH14 gt -9999)
   F8feh14[dwarft]=FeH14[dwarft]
   F8feh14err[dwarft]=.025  ;median for the sample (stolen from DR13 above, might need to fix later?)
   dwarft=where(dwarfnumax gt -9999)
   F8feh14err[dwarft]=sqrt(F8feh14err[dwarft]^2.+.01) ; Serenelli et all,  bumped it up by .1 dex in quadrature

   F8Evstates=CEvstates
   dwarft=where(dwarfnumax gt -9999)
   F8Evstates[dwarft]=0   

   F8good=where(F8numax gt 0 and CorFeH14 gt -9000 and F8seismass gt 0)
   F8predict=0.0*F8seismass-9999.
   F8predictnoFe=0.0*F8seismass-9999.
   F8predict[F8good]=0.033*(F8numax[F8good]/SYDnumaxsol)^(-0.593)*(F8seismass[F8good])^(-0.21)*exp(0.89*CorFeH14[F8good])
   F8predictnoFe[F8good]=.044*(F8numax[F8good]/SYDnumaxsol)^(-0.550)*(F8seismass[F8good])^(-0.67)*exp(0*CorFeH14[F8good])



;   readcol2, '~/Documents/Apogee/APOKASCageout.txt', skipline=1, KICa, Mmod, FeHmod, alphamod, loggmod, Teffmod, Agemod, Agemaxmod, $  	
;		FORMAT="A,X,X,F,X,F,X,F,X,X,F,X,F,X,F,F"

;   readcol2, '~/Documents/Apogee/ageout18prelim.txt', skipline=1, KICa, Mmod, FeHmod, alphamod, loggmod, Teffmod, Teffmodmerr, $
    readcol2, '~/Documents/Apogee/idl/ageoutDR13OctscaleML18.txt', skipline=1, KICa, Mmod, FeHmod, alphamod, loggmod, Teffmod, Teffmodmerr, $
                Teffmodperr, Agemod, Agemodmerr, Agemodperr, Agemaxmod, $  	
		FORMAT="A,X,X,F,X,F,X,F,X,X,X,F,X,F,F,F,X,F,F,F,F"

   match2, KICID, KICa, foundmine, findorig
   bad=where(foundmine eq -1)
   KICa=KICa(foundmine)
   KICa[bad]= '-9999'
   Mmod=Mmod(foundmine)
   Mmod[bad]= '-9999'
   FeHmod=FeHmod(foundmine)
   FeHmod[bad]= '-9999'
   alphamod=alphamod(foundmine)
   alphamod[bad]= '-9999'
   loggmod=loggmod(foundmine)
   loggmod[bad]= '-9999'
   Teffmod=Teffmod(foundmine)
   Teffmod[bad]= '-9999'
   Agemod=Agemod(foundmine)
   Agemod[bad]= '-9999'
   Teffmodmerr=Teffmodmerr(foundmine)
   Teffmodmerr[bad]= '-9999'
   Agemodmerr=Agemodmerr(foundmine)
   Agemodmerr[bad]= '-9999'
   Teffmodperr=Teffmodperr(foundmine)
   Teffmodperr[bad]= '-9999'
   Agemodperr=Agemodperr(foundmine)
   Agemodperr[bad]= '-9999'
   Agemaxmod=Agemaxmod(foundmine)
   Agemaxmod[bad]= '-9999'

   TeffAPGmMod=CorTeff14-Teffmod
   bad=where(CorTeff14 lt -9998 or Teffmod lt -9998)
   TeffAPGmMod[bad]='-9999'

   readcol2, '~/Documents/Apogee/ageout13prelim.txt', skipline=1, KICa13, Mmod13, FeHmod13, alphamod13, loggmod13, Teffmod13, Teffmodmerr13, $
                Teffmodperr13, Agemod13, Agemodmerr13, Agemodperr13, Agemaxmod13, $  	
		FORMAT="A,X,X,F,X,F,X,F,X,X,X,F,X,F,F,F,X,F,F,F,F"

   match2, KICID, KICa13, foundmine, findorig
   bad=where(foundmine eq -1)
   KICa13=KICa13(foundmine)
   KICa13[bad]= '-9999'
   Mmod13=Mmod13(foundmine)
   Mmod13[bad]= '-9999'
   FeHmod13=FeHmod13(foundmine)
   FeHmod13[bad]= '-9999'
   alphamod13=alphamod13(foundmine)
   alphamod13[bad]= '-9999'
   loggmod13=loggmod13(foundmine)
   loggmod13[bad]= '-9999'
   Teffmod13=Teffmod13(foundmine)
   Teffmod13[bad]= '-9999'
   Agemod13=Agemod13(foundmine)
   Agemod13[bad]= '-9999'
   Teffmodmerr13=Teffmodmerr13(foundmine)
   Teffmodmerr13[bad]= '-9999'
   Agemodmerr13=Agemodmerr13(foundmine)
   Agemodmerr13[bad]= '-9999'
   Teffmodperr13=Teffmodperr13(foundmine)
   Teffmodperr13[bad]= '-9999'
   Agemodperr13=Agemodperr13(foundmine)
   Agemodperr13[bad]= '-9999'
   Agemaxmod13=Agemaxmod13(foundmine)
   Agemaxmod13[bad]= '-9999'

   TeffAPGmMod13=CorTeff14-Teffmod13
   bad=where(CorTeff14 lt -9998 or Teffmod13 lt -9998)
   TeffAPGmMod13[bad]='-9999'

   readcol2, '~/Documents/Apogee/ageout23prelim.txt', skipline=1, KICa23, Mmod23, FeHmod23, alphamod23, loggmod23, Teffmod23, Teffmodmerr23, $
                Teffmodperr23, Agemod23, Agemodmerr23, Agemodperr23, Agemaxmod23, $  	
		FORMAT="A,X,X,F,X,F,X,F,X,X,X,F,X,F,F,F,X,F,F,F,F"

   match2, KICID, KICa23, foundmine, findorig
   bad=where(foundmine eq -1)
   KICa23=KICa23(foundmine)
   KICa23[bad]= '-9999'
   Mmod23=Mmod23(foundmine)
   Mmod23[bad]= '-9999'
   FeHmod23=FeHmod23(foundmine)
   FeHmod23[bad]= '-9999'
   alphamod23=alphamod23(foundmine)
   alphamod23[bad]= '-9999'
   loggmod23=loggmod23(foundmine)
   loggmod23[bad]= '-9999'
   Teffmod23=Teffmod23(foundmine)
   Teffmod23[bad]= '-9999'
   Agemod23=Agemod23(foundmine)
   Agemod23[bad]= '-9999'
   Teffmodmerr23=Teffmodmerr23(foundmine)
   Teffmodmerr23[bad]= '-9999'
   Agemodmerr23=Agemodmerr23(foundmine)
   Agemodmerr23[bad]= '-9999'
   Teffmodperr23=Teffmodperr23(foundmine)
   Teffmodperr23[bad]= '-9999'
   Agemodperr23=Agemodperr23(foundmine)
   Agemodperr23[bad]= '-9999'
   Agemaxmod23=Agemaxmod23(foundmine)
   Agemaxmod23[bad]= '-9999'

   TeffAPGmMod23=CorTeff14-Teffmod23
   bad=where(CorTeff14 lt -9998 or Teffmod23 lt -9998)
   TeffAPGmMod23[bad]='-9999'



;    if startype eq 'highmal' then match2, KICID, highmal, malfound, good

   readcol2, '~/Documents/Apogee/dmitryvsini3.txt', skipline=13, KICIDd, APGidd, vsini3d, vsini3derr, $
              quald, FORMAT="A,A,F,F,F"

   match2, KICID, KICIDd, foundmine, findorig
   bad=where(foundmine eq -1)
   KICIDd=KICIDd(foundmine)
   KICIDd[bad]= '-9999'
   APGidd=APGidd(foundmine)
   APGidd[bad]= '-9999'
   vsini3d=vsini3d(foundmine)
   vsini3d[bad]= '-9999'
   vsini3derr=vsini3derr(foundmine)
   vsini3derr[bad]= '-9999'
   quald=quald(foundmine)
   quald[bad]= '-9999'

   qualdbad=where(quald ne 1)
   vsini3dgood=vsini3d
   vsini3dgood[qualdbad]='-9999'
   vsini3dgooderr=vsini3derr
   vsini3dgooderr[qualdbad]='-9999'



   readcol2, '~/Documents/Apogee/APOKASCageoutspec.txt', skipline=1, KICas, Mmods, FeHmods, alphamods, loggmods, Teffmods, Agemods, Agemaxmods, $  	
		FORMAT="A,X,X,F,X,F,X,F,X,X,F,X,F,X,F,F"
   match2, KICID, KICas, foundmine, findorig
   bad=where(foundmine eq -1)
   KICas=KICas(foundmine)
   KICas[bad]= '-9999'
   Mmods=Mmods(foundmine)
   Mmods[bad]= '-9999'
   FeHmods=FeHmods(foundmine)
   FeHmods[bad]= '-9999'
   alphamods=alphamods(foundmine)
   alphamods[bad]= '-9999'
   loggmods=loggmods(foundmine)
   loggmods[bad]= '-9999'
   Teffmods=Teffmods(foundmine)
   Teffmods[bad]= '-9999'
   Agemods=Agemods(foundmine)
   Agemods[bad]= '-9999'
   Agemaxmods=Agemaxmods(foundmine)
   Agemaxmods[bad]= '-9999'

   TeffAPGmModspec=CorTeff14-Teffmods
   bad=where(CorTeff14 lt -9998 or Teffmods lt -9998)
   TeffAPGmModspec[bad]='-9999'
;    if startype eq 'highmal' then match2, KICID, highmal, malfound, good

;print, 'delnuRG', delnuRG(0), 'numax', numaxRG(0)
;   match2, KICID, weirds,  weirdfound, goodKics
;    checkgoodK=where (goodKics ne -1)
;    goodKics=goodKics(checkgoodK)
;   print, n_elements(goodKics), n_elements(weirds)

;  readcol2, '~/Documents/Apogee/MLtesterrTayarCN.out', skipline=1, KICgs,  AgeGS,  $  	
  readcol2, '~/Documents/MixingLength/Garrett/new_outfiles/MLtesterr3bDR16A3PalphaM_july5.out', skipline=1, KICgs, TeffGS, MLGS, AgeGS,C12GS, C13GS,N14GS,XsurfGS,  $  	

		FORMAT="A,X,X,X,X,X,X,X,X,X,X,X,X,F,F,F,F,F,F,F"
   match2, KICID, KICgs, foundmine, findorig
   bad=where(foundmine eq -1)
   KICgs=KICgs(foundmine)
   KICgs[bad]= '-9999'
   TeffGS=TeffGS(foundmine)
   TeffGS[bad]= '-9999'
   MLGS=MLGS(foundmine)
   MLGS[bad]= '-9999'
   AgeGS=AgeGS(foundmine)
   AgeGS[bad]= '-9999'
   C12GS=C12GS(foundmine)
   C12GS[bad]= '-9999'
   C13GS=C13GS(foundmine)
   C13GS[bad]= '-9999'
   N14GS=N14GS(foundmine)
   N14GS[bad]= '-9999'
   XsurfGS=XsurfGS(foundmine)
   XsurfGS[bad]= '-9999'

   C12sun=3.056217e-03
   C13sun=3.433136e-05
   Xsun=7.093619e-01
   N14sun=9.050160e-04

    bCHGS=ALOG10((C12GS/12.+C13GS/13.)/XsurfGS)-ALOG10((C12sun/12.+C13sun/13.)/Xsun)
    bNHGS=ALOG10((N14GS/14.)/XsurfGS)-ALOG10((N14sun/14.)/Xsun)
    CNGS=bCHGS-bNHGS
    CNGS[bad]=-9999
    bCHGS[bad]=-9999
    bNHGS[bad]=-9999

Evstates=CorFeH12*0-9999.
state=where(Evstate eq 'CLUMP')
Evstates[state]=2
state=where(Evstate eq 'DWARF/SUBGIANT')
Evstates[state]=1
state=where(Evstate eq 'RGB')
Evstates[state]=3
state=where(Evstate eq 'UNKNOWN')
Evstates[state]=-9999

allEvstates=Evstates
state=where(Bevstate eq 'clump')
if state[0] ne -1 then allEvstates[state]=2
state=where(Bevstate eq 'clump?')
if state[0] ne -1 then allEvstates[state]=2.2
state=where(Bevstate eq '?')
if state[0] ne -1 then allEvstates[state]=2.5
state=where(Bevstate eq 'RGB')
if state[0] ne -1 then allEvstates[state]=3

state=where(Sevstate2 eq 'CLUMP')
if state[0] ne -1 then allEvstates[state]=2
state=where(Sevstate2 eq 'RGB')
if state[0] ne -1 then allEvstates[state]=3

state=where(Sevstate eq 'RC')
if state[0] ne -1 then allEvstates[state]=2
state=where(Sevstate eq 'RC?')
if state[0] ne -1 then allEvstates[state]=2.2
state=where(Sevstate eq '?')
if state[0] ne -1 then allEvstates[state]=2.5
state=where(Sevstate eq 'RGB')
if state[0] ne -1 then allEvstates[state]=3
state=where(Sevstate eq 'RGB?')
if state[0] ne -1 then allEvstates[state]=2.8

state=where(Tevstate eq 'RC')
if state[0] ne -1 then allEvstates[state]=2
state=where(Tevstate eq 'SC')
if state[0] ne -1 then allEvstates[state]=2
state=where(Tevstate eq 'RGB')
if state[0] ne -1 then allEvstates[state]=3

state=where(Bevstate2 eq 'C' or Bevstate2 eq '2' or Bevstate2 eq 'p2')
if state[0] ne -1 then allEvstates[state]=2
state=where(Bevstate2 eq 'f')
if state[0] ne -1 then allEvstates[state]=2.5
state=where(Bevstate2 eq 'A' or Bevstate2 eq 'R')
if state[0] ne -1 then allEvstates[state]=3
state=where(Bevstate2 eq 'S')
if state[0] ne -1 then allEvstates[state]=1
;   print, where(KICID eq '5598645'),Bevstate2(where(KICID eq '5598645')),allEvstates(where(KICID eq '5598645'))

SeisEvstates=allEvstates

allEvstates=YRECevstate
good=where(SeisEvstates gt -9998)
allEvstates[good]=SeisEvstates[good]

SeismYRECevstate=SeisEvstates-YRECevstate
bad=where(SeisEvstates lt -9998 or YRECevstate lt -9998)
SeismYRECevstate[bad]='-9999'



;print, CorLoggerr(0)
SeisLogg=SeisLoggS2DW
SeisLoggerr=SeisLoggS2DWperr


giants=where( SeisLoggS2RG gt 0)
SeisLogg[giants]=SeisLoggS2RG[giants]
SeisLoggerr[giants]=SeisLoggS2RGperr[giants]

S1giants=where(SeisLoggS1RG gt 0 and SeisLoggS2RG le 0)
SeisLogg[S1giants]=SeisLoggS1RG[S1giants]
SeisLoggerr[S1giants]=SeisLoggS1RGperr[S1giants]

S1dwarf=where(SeisLoggS1DW gt 0 and SeisLoggS2DW le 0)
if S1dwarf[0] ne -1 then SeisLogg[S1dwarf]=SeisLoggS1DW[S1dwarf]
if S1dwarf[0] ne -1 then SeisLoggerr[S1dwarf]=SeisLoggS1DWperr[S1dwarf]



SeisM=SeisMS2DW
SeisMerr=SeisMS2DWperr


giants=where( SeisMS2RG gt 0)
SeisM[giants]=SeisMS2RG[giants]
SeisMerr[giants]=SeisMS2RGperr[giants]

S1giants=where(SeisMS1RG gt 0 and SeisMS2RG le 0)
SeisM[S1giants]=SeisMS1RG[S1giants]
SeisMerr[S1giants]=SeisMS1RGperr[S1giants]

S1dwarf=where(SeisMS1DW gt 0 and SeisMS2DW le 0)
if S1dwarf[0] ne -1 then SeisM[S1dwarf]=SeisMS1DW[S1dwarf]
if S1dwarf[0] ne -1 then SeisMerr[S1dwarf]=SeisMS1DWperr[S1dwarf]

SeisR=SeisRS2DW
SeisRerr=SeisRS2DWperr


giants=where( SeisRS2RG gt 0)
SeisR[giants]=SeisRS2RG[giants]
SeisRerr[giants]=SeisRS2RGmerr[giants]

S1giants=where(SeisRS1RG gt 0 and SeisRS2RG le 0)
SeisR[S1giants]=SeisRS1RG[S1giants]
SeisRerr[S1giants]=SeisRS1RGmerr[S1giants]

S1dwarf=where(SeisRS1DW gt 0 and SeisRS2DW le 0)
if S1dwarf[0] ne -1 then SeisR[S1dwarf]=SeisRS1DW[S1dwarf]
if S1dwarf[0] ne -1 then SeisRerr[S1dwarf]=SeisRS1DWperr[S1dwarf]


;run different abundance colorings w/o copypasting all this

;if colortype eq 'alpha' then begin
;
;   CoralphaFe=CFe
;   CoralphaFeerr=CorCFeerr
;endif
;
;
;if colortype eq 'C' then begin
;
;   CoralphaFe=CFe
;   CoralphaFeerr=CorCFeerr
;endif
;
;if colortype eq 'N' then begin
;
;   CoralphaFe=NFe
;   CoralphaFeerr=CorNFeerr
;endif

dwarf=where(SeisM lt 0)
SeisM[dwarf]=-9999   ;used to be 0. keep in mind, might need to change for some things

SeisM10=SeisM
SeisR10=SeisR
SeisLogg10=SeisLogg
SeisM10err=SeisMerr
SeisR10err=SeisRerr
SeisLogg10err=SeisLoggerr


CN=CFe-NFe


goodcn=where(CN gt -10.0 and CN lt 10.0)

badcn=where(CN ne CN)
if badcn[0] ne -1 then CN[badcn]=-9999

badcn= where( CN gt mean(CN(goodcn))+3.*stddev(CN(goodcn)) or $
        CN lt mean(CN(goodcn))-3.*stddev(CN(goodcn)) )
;print, mean(CN(goodcn)), stddev(CN(goodcn))
CN[badcn]=-9999
;wait, 100


;CN13=CFe13-NFe13
;badCN13=where(CFe13 lt -9998. or NFe13 lt -9998.)
;CN13[badCN13]='-9999'
;CN13err=sqrt(CFe13err^2.+NFe13err^2.)
;badCN13=where(CFe13 lt -9998. or NFe13 lt -9998. or CFe13err lt -9998. or NFe13err lt -9998.)
;CN13err[badCN13]='-9999'

CN14=CFe14-NFe14
badCN14=where(CFe14 lt -9998. or NFe14 lt -9998.)
CN14[badCN14]='-9999'
CN14err=sqrt(CFe14err^2.+NFe14err^2.)
badCN14=where(CFe14 lt -9998. or NFe14 lt -9998. or CFe14err lt -9998. or NFe14err lt -9998.)
CN14err[badCN14]='-9999'

CN16=CFe16-NFe16
badCN16=where(CFe16 lt -9998. or NFe16 lt -9998.)
CN16[badCN16]='-9999'
CN16err=sqrt(CFe16err^2.+NFe16err^2.)
badCN16=where(CFe16 lt -9998. or NFe16 lt -9998. or CFe16err lt -9998. or NFe16err lt -9998.)
CN16err[badCN16]='-9999'

;Delete this section once we have real seismic measurements
;delnuprelim=0.263*numaxprelim^0.772 ;Stello+ 2009
delnuRG=delnuT12
numaxRG=numaxT12
delnuRGerr=delnuT12err
numaxRGerr=numaxT12err
;end delete section

CorJmK=TMASSJMag-TMASSKMag- 0.512*KICEBmV
CorJ= TMASSJMag-5.0*ALOG10(KICEBmV/.53)-5.0-0.188*0.512*KICEBmV/0.165
CorK= TMASSKMag-5.0*ALOG10(KICEBmV/.53)-5.0-0.062*0.512*KICEBmV/0.165
SeisMscale=-9999+0.0*delnuRG
SeisRscale=-9999+0.0*delnuRG
SeisMerr=-9999+0.0*delnuRG
SeisRerr=-9999+0.0*delnuRG
SeisLoggscale=-9999+0.0*delnuRG
SeisLoggerr=-9999+0.0*delnuRG
SeisM14scale=-9999+0.0*delnuRG
SeisR14scale=-9999+0.0*delnuRG
SeisM14err=-9999+0.0*delnuRG
SeisR14err=-9999+0.0*delnuRG
SeisLogg14scale=-9999+0.0*delnuRG
SeisLogg14err=-9999+0.0*delnuRG

SeisMscaleP12=-9999+0.0*delnuRG
SeisRscaleP12=-9999+0.0*delnuRG
SeisMscaleP12err=-9999+0.0*delnuRG
SeisRscaleP12err=-9999+0.0*delnuRG
SeisLoggscaleP12=-9999+0.0*delnuRG
SeisLoggscaleP12err=-9999+0.0*delnuRG
;print, 'delnuRG', delnuRG(0), 'numax', numaxRG(0)
good= where(CorTeff12 gt 0 and delnuRG gt 0 and numaxRG gt 0)
goodP12= where(P12Teff gt 0 and delnuRG gt 0 and numaxRG gt 0)
;print, 'teff and seismo', n_elements(good)
;print, 'delnuRG', delnuRG(0), 'numax', numaxRG(0)
numaxsol=3090. ;Courtney
Teffsol=5771.8  ;Teff from Mamajek
delnusol=135.1 ;Courtney
bigG=6.67259*10^(-8.0) ;cgs
Msun=1.99*10^(33.0) ;g
Rsuncm=6.96*10^(10.0) ;cm
Rsun=6.96*10^(5.0) ;km
gsol=27423 ;  cgs
SeisMscale(good)= (delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff12(good)/Teffsol)^(1.5)
SeisRscale(good)= (delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff12(good)/Teffsol)^0.5
SeisLoggscale(good)= ALOG10(gsol*(numaxRG(good)/numaxsol)*(CorTeff12(good)/Teffsol)^0.5)
SeisMscaleP12(goodP12)= (delnuRG(goodP12)/delnusol)^(-4.0)* (numaxRG(goodP12)/numaxsol)^(3.0)*(P12Teff(goodP12)/Teffsol)^(1.5)
SeisRscaleP12(goodP12)= (delnuRG(goodP12)/delnusol)^(-2.0)* (numaxRG(goodP12)/numaxsol)*(P12Teff(goodP12)/Teffsol)^0.5
SeisLoggscaleP12(goodP12)= ALOG10(gsol*(numaxRG(goodP12)/numaxsol)*(P12Teff(goodP12)/Teffsol)^0.5)

SeisM14scale(good)= (delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)
SeisR14scale(good)= (delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff14(good)/Teffsol)^0.5
SeisLogg14scale(good)= ALOG10(gsol*(numaxRG(good)/numaxsol)*(CorTeff14(good)/Teffsol)^0.5)


dellogg=-9999+0.0*delnuRG
gooddel=where(CorLogg12 gt -9998 and SeisLoggscale gt -9998)
dellogg(gooddel)=SeisLoggscale(gooddel)-CorLogg12(gooddel)
print, SeisRscale(110:113),SeisRscaleP12(110:113) 

;print, 'seismscale', n_elements(where(SeisMscale ne -9999))
;wait, 100
;delete this section too when we have real values
SeisM=SeisMscale
SeisR=SeisRscale
SeisLogg=SeisLoggscale

;replace scaling values with published mass values where available
SeisMS=SeisM
pubm=where(massS gt 0)
SeisM[pubm]=massS[pubm]
pubm=where(massB gt 0)
SeisM[pubm]=massB[pubm]
pubm=where(SeisM10 gt 0)
SeisM[pubm]=SeisM10[pubm]

SeisMerr(good)=Sqrt(((delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff12(good)/Teffsol)^(1.5)/delnuRG(good)*4.0)^(2.0)*delnuRGerr(good)^(2.0)+$
       ((delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff12(good)/Teffsol)^(1.5)/numaxRG(good)*3.0)^(2.0)*numaxRGerr(good)^(2.0)+$
       ((delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff12(good)/Teffsol)^(1.5)/CorTeff12(good)*1.5)^(2.0)*CorTeff12err(good)^(2.0))
SeisRerr(good)=Sqrt(((delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff12(good)/Teffsol)^(0.5)/delnuRG(good)*2.0)^(2.0)*delnuRGerr(good)^(2.0)+ $
       ((delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff12(good)/Teffsol)^0.5/numaxRG(good)*1.0)^(2.0)*numaxRGerr(good)^(2.0)+$
       ((delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff12(good)/Teffsol)^0.5/CorTeff12(good)*0.5)^(2.0)*CorTeff12err(good)^(2.0))
SeisLoggerr(good)=sqrt((1.0/ALOG(10.0)/(gsol*(numaxRG(good)/numaxsol)*(CorTeff12(good)/Teffsol)^0.5)/numaxRG(good)*numaxRGerr(good))^(2.0)+$
                (1.0/ALOG(10.0)/(gsol*(numaxRG(good)/numaxsol)*(CorTeff12(good)/Teffsol)^0.5)/CorTeff12(good)*(-0.5)*CorTeff12err(good))^(2.0))


SeisM14err(good)=Sqrt(((delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)/delnuRG(good)*4.0)^(2.0)*delnuRGerr(good)^(2.0)+$
       ((delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)/numaxRG(good)*3.0)^(2.0)*numaxRGerr(good)^(2.0)+$
       ((delnuRG(good)/delnusol)^(-4.0)* (numaxRG(good)/numaxsol)^(3.0)*(CorTeff14(good)/Teffsol)^(1.5)/CorTeff14(good)*1.5)^(2.0)*CorTeff14err(good)^(2.0))
SeisR14err(good)=Sqrt(((delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff14(good)/Teffsol)^(0.5)/delnuRG(good)*2.0)^(2.0)*delnuRGerr(good)^(2.0)+ $
       ((delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff14(good)/Teffsol)^0.5/numaxRG(good)*1.0)^(2.0)*numaxRGerr(good)^(2.0)+$
       ((delnuRG(good)/delnusol)^(-2.0)* (numaxRG(good)/numaxsol)*(CorTeff14(good)/Teffsol)^0.5/CorTeff14(good)*0.5)^(2.0)*CorTeff14err(good)^(2.0))
SeisLogg14err(good)=sqrt((1.0/ALOG(10.0)/(gsol*(numaxRG(good)/numaxsol)*(CorTeff14(good)/Teffsol)^0.5)/numaxRG(good)*numaxRGerr(good))^(2.0)+$
                (1.0/ALOG(10.0)/(gsol*(numaxRG(good)/numaxsol)*(CorTeff14(good)/Teffsol)^0.5)/CorTeff14(good)*(-0.5)*CorTeff14err(good))^(2.0))


SeisMscaleP12err(goodP12)=Sqrt(((delnuRG(goodP12)/delnusol)^(-4.0)* (numaxRG(goodP12)/numaxsol)^(3.0)*(P12Teff(goodP12)/Teffsol)^(1.5)/delnuRG(goodP12)*4.0)^(2.0)*delnuRGerr(goodP12)^(2.0)+$
       ((delnuRG(goodP12)/delnusol)^(-4.0)* (numaxRG(goodP12)/numaxsol)^(3.0)*(P12Teff(goodP12)/Teffsol)^(1.5)/numaxRG(goodP12)*3.0)^(2.0)*numaxRGerr(goodP12)^(2.0)+$
       ((delnuRG(goodP12)/delnusol)^(-4.0)* (numaxRG(goodP12)/numaxsol)^(3.0)*(P12Teff(goodP12)/Teffsol)^(1.5)/CorTeff12(goodP12)*1.5)^(2.0)*P12Tefferr(goodP12)^(2.0))
SeisRscaleP12err(goodP12)=Sqrt(((delnuRG(goodP12)/delnusol)^(-2.0)* (numaxRG(goodP12)/numaxsol)*(P12Teff(goodP12)/Teffsol)^(0.5)/delnuRG(goodP12)*2.0)^(2.0)*delnuRGerr(goodP12)^(2.0)+ $
       ((delnuRG(goodP12)/delnusol)^(-2.0)* (numaxRG(goodP12)/numaxsol)*(P12Teff(goodP12)/Teffsol)^0.5/numaxRG(goodP12)*1.0)^(2.0)*numaxRGerr(goodP12)^(2.0)+$
       ((delnuRG(goodP12)/delnusol)^(-2.0)* (numaxRG(goodP12)/numaxsol)*(P12Teff(goodP12)/Teffsol)^0.5/CorTeff12(goodP12)*0.5)^(2.0)*P12Tefferr(goodP12)^(2.0))
SeisLoggscaleP12err(goodP12)=sqrt((1.0/ALOG(10.0)/(gsol*(numaxRG(goodP12)/numaxsol)*(P12Teff(goodP12)/Teffsol)^0.5)/numaxRG(goodP12)*numaxRGerr(goodP12))^(2.0)+$
                (1.0/ALOG(10.0)/(gsol*(numaxRG(goodP12)/numaxsol)*(P12Teff(goodP12)/Teffsol)^0.5)/P12Teff(goodP12)*(-0.5)*P12Tefferr(goodP12))^(2.0))

;end delete section

periodmax13=vsinimine13cor*0.0-9999.
good=where(vsinimine13cor gt 4 and SeisRscaleP12)
periodmax13(good)=2*3.14159*SeisRscaleP12(good)*Rsun/vsinimine13cor(good)/60./60./24. ;days


TeffAPGmModmFeH=TeffAPGmMod-(CorFeH14*280.0+120)
velocityT12=2*3.14159*SeisR*Rsun/ProtT12/60./60./24. ;kms
velocityT12P12=2*3.14159*SeisRscaleP12*Rsun/ProtT12/60./60./24. ;kms
velocityT14=2*3.14159*SeisR14scale*Rsun/ProtT12/60./60./24. ;kms
bad=where(ProtT12 le 0)
velocityT12P12[bad]=-9999.0
bad=where(ProtT12 le 0 or SeisR14scale le 0)
velocityT14[bad]=-9999.0

;periodmax=2*3.14159*SeisR*Rsun/vsinimine12/60./60./24. ;days
;periodmaxerr=2*3.14159/vsinimine12/60./60./24.*Sqrt((SeisRerr*Rsun)^2+(SeisR*Rsun)^2*vsinimine12err^2/vsinimine12^2)
;inclination=asin(ProtT12/periodmax)
;inclinationerr=1.0/Sqrt(1-(ProtT12/periodmax)^2)*Sqrt((ProtT12err/periodmax)^2+(ProtT12*periodmaxerr/periodmax^2)^2)
;sininclination=(ProtT12/periodmax)
;sininclinationerr=sqrt(ProtT12err^2/periodmax^2+ProtT12^2/periodmax^4*periodmaxerr^2)
;inclination=inclination*180./3.14159
;inclinationerr=inclinationerr*180./3.14159


periodmax=2*3.14159*SeisR14scale*Rsun/vsinimine13cor/60./60./24. ;days
periodmaxerr=2*3.14159/vsinimine13cor/60./60./24.*Sqrt((SeisR14err*Rsun)^2+(SeisR14scale*Rsun)^2*vsinimine13err^2/vsinimine13cor^2)
inclination=asin(ProtT12/periodmax)
inclinationerr=1.0/Sqrt(1-(ProtT12/periodmax)^2)*Sqrt((ProtT12err/periodmax)^2+(ProtT12*periodmaxerr/periodmax^2)^2)
sininclination=(ProtT12/periodmax)
sininclinationerr=sqrt(ProtT12err^2/periodmax^2+ProtT12^2/periodmax^4*periodmaxerr^2)
inclination=inclination*180./3.14159
inclinationerr=inclinationerr*180./3.14159


periodmaxP12=2*3.14159*SeisRscaleP12*Rsun/vsinimine12/60./60./24. ;days
periodmaxP12err=2*3.14159/vsinimine12/60./60./24.*Sqrt((SeisRscaleP12err*Rsun)^2+(SeisRscaleP12*Rsun)^2*vsinimine12err^2/vsinimine12^2)
inclinationP12=asin(ProtT12/periodmaxP12)
inclinationP12err=1.0/Sqrt(1-(ProtT12/periodmaxP12)^2)*Sqrt((ProtT12err/periodmaxP12)^2+(ProtT12*periodmaxP12err/periodmaxP12^2)^2)
sininclinationP12=(ProtT12/periodmaxP12)
sininclinationP12err=sqrt(ProtT12err^2/periodmaxP12^2+ProtT12^2/periodmaxP12^4*periodmaxP12err^2)
inclinationP12=inclinationP12*180./3.14159
inclinationP12err=inclinationP12err*180./3.14159

periodmaxP12v10=2*3.14159*SeisRscaleP12*Rsun/vsinimine/60./60./24. ;days
periodmaxP12v10err=2*3.14159/vsinimine/60./60./24.*Sqrt((SeisRscaleP12err*Rsun)^2+(SeisRscaleP12*Rsun)^2*vsinimine12err^2/vsinimine12^2)
inclinationP12v10=asin(ProtT12/periodmaxP12v10)
inclinationP12v10err=1.0/Sqrt(1-(ProtT12/periodmaxP12v10)^2)*Sqrt((ProtT12err/periodmaxP12v10)^2+(ProtT12*periodmaxP12v10err/periodmaxP12v10^2)^2)



good=where(ProtT12 ne -9999 and SeisRscaleP12 gt 0)
print, n_elements(good)

Omega=0.0*ProtT12-9999.0
Omegaerr=0.0*ProtT12-9999.0
OmegacritP12=0.0*ProtT12-9999.0
OmegaOmegacritP12=0.0*ProtT12-9999.0

Omega(good)=2.0*3.14159/(60.*60.*24.*ProtT12(good))
Omegaerr(good)=2.0*3.14159/(60.*60.*24.*ProtT12(good)*ProtT12(good))*ProtT12err(good)
OmegacritP12(good)=sqrt((8.*bigG*SeisMscaleP12(good)*Msun)/(double(27.)*SeisRscaleP12(good)^(3.0)*Rsuncm^(3.0)))
OmegaOmegacritP12(good)=Omega(good)/OmegacritP12(good)


vmax=-9999+0*ProtMc 
vmaxerr=vmax
good=where(ProtMc gt 0 and H14R gt 0)
vmax[good]=2*3.14159*H14R[good]*Rsun/ProtMc[good]/60./60./24. 
good=where(ProtMc gt double(0) and H14R gt 0 and ProtMcerr gt 0 and H14Rperr gt 0)
vmaxerr[good]=sqrt((2*3.14159*H14Rperr[good]*Rsun/ProtMc[good]/60./60./24.)^2.+(double(2)*3.14159*H14R[good]*Rsun*ProtMcerr[good]/(ProtMc[good])^2./60./60./24.)^2.)

H14logg=-9999+0*H14M 
good=where(H14R gt 0 and H14M gt 0)
H14logg[good]=ALOG10(bigG*H14M[good]*Msun/(H14R[good]*H14R[good]*Rsuncm*Rsuncm))

good=where(H14R gt 0 and H14Rperr gt 0 and vsinimine13cor gt 0)
periodmaxH14v13=2*3.14159*H14R*Rsun/vsinimine13cor/60./60./24. ;days
periodmaxH14v13err=2*3.14159/vsinimine13cor/60./60./24.*Sqrt((H14Rperr*Rsun)^2+(H14R*Rsun)^2*vsinimine13err^2/vsinimine13cor^2)

periodmaxSDSSv13=2*3.14159*SeisRdw*Rsun/vsinimine13cor/60./60./24. ;days
periodmaxSDSSv13err=2*3.14159/vsinimine13cor/60./60./24.*Sqrt((SeisRdwerr*Rsun)^2+(SeisRdw*Rsun)^2*vsinimine13err^2/vsinimine13cor^2)
inclinationH14v13=asin(ProtMc/periodmaxH14v13)
inclinationH14v13err=1.0/Sqrt(1-(ProtMc/periodmaxH14v13)^2)*Sqrt((ProtMcerr/periodmaxH14v13)^2+(ProtMc*periodmaxH14v13err/periodmaxH14v13^2)^2)

periodmaxP12v13=2*3.14159*SeisRscaleP12*Rsun/vsinimine13cor/60./60./24. ;days
periodmaxP12v13err=2*3.14159/vsinimine13cor/60./60./24.*Sqrt((SeisRscaleP12err*Rsun)^2+(SeisRscaleP12*Rsun)^2*vsinimine13err^2/vsinimine13cor^2)
inclinationP12v13=asin(ProtT12/periodmaxP12v13)
inclinationP12v13err=1.0/Sqrt(1-(ProtT12/periodmaxP12v13)^2)*Sqrt((ProtT12err/periodmaxP12v13)^2+(ProtT12*periodmaxP12v13err/periodmaxP12v13^2)^2)



bovyoffset=0.0018*(CorTeff16-(-382.5*CorFeH16+4607.))+2.5-CorLogg16

bad=where(CorTeff16 lt -9998 or CorFeH16 lt -9998 or CorLogg16 lt -9998)
bovyoffset[bad]=-9999

;Teff13mbovytref=CorTeff13-(-382.5*CorFeH13+4607.)-(CorLogg13-2.5)/.0018
;bad=where(CorTeff13 lt -9998 or CorFeH13 lt -9998 or CorLogg13 lt -9998)
;Teff13mbovytref[bad]=-9999

;halfcorTeff13mbovytref=CorTeff13-(-382.5*CorFeH13+4607.)-(Logg13-2.5)/.0018
;bad=where(CorTeff13 lt -9998 or CorFeH13 lt -9998 or Logg13 lt -9998)
;halfcorTeff13mbovytref[bad]=-9999

;uncorTeff13mbovytref=Teff13-(-382.5*FeH13+4607.)-(Logg13-2.5)/.0018


;jtbovyoffsetlin=Teff13mbovytref-(-311.5*CN13-81.5)
;below=where(CN13 gt -9998 and CN13 lt -0.5)
;above=where(CN13 ge -0.5)
;jtbovyoffsetbr=jtbovyoffsetlin*0.0-9999.
;jtbovyoffsetbr[below]=Teff13mbovytref[below]-(-80.*CN13[below]+60)
;jtbovyoffsetbr[above]=Teff13mbovytref[above]-(-375.*CN13[above]-87.5)
;bad=where(CorTeff13 lt -9998 or CorFeH13 lt -9998 or CorLogg13 lt -9998 or CN13 lt -9998)
;jtbovyoffsetlin[bad]=-9999.
;jtbovyoffsetbr[bad]=-9999.

;jthalfcorbovyoffsetbr=jtbovyoffsetlin*0.0-9999.
;below=where(CN13 gt -9998 and CN13 lt -0.35)
;above=where(CN13 ge -0.35)
;jthalfcorbovyoffsetbr[below]=halfcorTeff13mbovytref[below]-(-30.8*CN13[below]-70.8)
;jthalfcorbovyoffsetbr[above]=halfcorTeff13mbovytref[above]-(-338.5*CN13[above]-178.5)
;bad=where(CorTeff13 lt -9998 or CorFeH13 lt -9998 or Logg13 lt -9998 or CN13 lt -9998)

;jthalfcorbovyoffsetbr[bad]=-9999.

;jtsvmoffset=jtbovyoffsetlin*0.0-9999.
;below=where(CN13 gt -9998 and CN13 lt -0.35234)
;above=where(CN13 ge -0.35234)
;jtsvmoffset[below]=halfcorTeff13mbovytref[below]-(-30.8*CN13[below]-70.8)
;jtsvmoffset[above]=halfcorTeff13mbovytref[above]-(-338.5*CN13[above]-178.5)
;bad=where(CorTeff13 lt -9998 or CorFeH13 lt -9998 or Logg13 lt -9998 or CN13 lt -9998)

;jtsvmoffset[bad]=-9999.;

;svmevstate=make_array(n_elements(jtsvmoffset), /string, value='-9999')
;good=where(jtsvmoffset lt 0 and jtsvmoffset gt -9998 and Logg13 le 3.5)
;svmevstate[good]='RGB'
;good=where(jtsvmoffset ge 0 and halfcorTeff13mbovytref lt (405.28*CN13+261.74) and Logg13 le 3.5)
;svmevstate[good]='RC'
;good=where(jtsvmoffset ge 0 and halfcorTeff13mbovytref ge (405.28*CN13+261.74) and Logg13 le 3.5)
;svmevstate[good]='2CL'


flickeroffset=F8Logg-EMPSeisLoggScale ;SeisLogg13
bad=where(F8Logg lt -9998 or EMPSeisLoggScale lt -9998)
flickeroffset[bad]=-9999

flickerSpecoffset=F8Logg-CorLogg16
bad=where(F8Logg lt -9998 or CorLogg16 lt -9998)
flickerSpecoffset[bad]=-9999

SeisSpecloggoffset=EMPSeisLoggScale-CorLogg16
bad=where(CorLogg16 lt -9998 or EMPSeisLoggScale lt -9998)
SeisSpecloggoffset[bad]=-9999

;writecol, 'junkout.txt', KICID, periodmax, periodmaxerr, SeisR, SeisRerr, vsinimine, vsinimineerr
;the three vsinis are SpecVsini<-old, vsinimine, and vsini3d  (old=Vs_bestd); vsinimine12 
;;;;THESE ARE THE THINGS YOU CHANGE
;   print, 'gapcross', KICB2(where(Bevstate2 eq 'R' and massB gt 2.0)), massB(where(Bevstate2 eq 'R' and massB gt 2.0)), SeisMscale(where(Bevstate2 eq 'R' and massB gt 2.0))

;CN=CH-NH
CN=CFe-NFe
CM=CFe
NM=NFe
kicnum=float(KICID)
;delLoggOCT13=OCTSeisLoggscale-Logg13
;delLoggOCT14=OCTSeisLoggscale-CorLogg14

   readcol2, '~/Documents/Apogee/gaulmecomments.txt', KICpg,variability, oscillations,pgbinary, doublerg, otheroscillations, weirdlc, FORMAT='A,F,F,F,F,F,F' ;
   match2, KICID, KICpg, foundpg, foundorig

   bad=where(foundpg eq -1)
   KICpg=KICpg(foundpg)
   KICpg[bad]= '-9999'
   variability=variability(foundpg)
   variability[bad]= '-9999'
   oscillations=oscillations(foundpg)
   oscillations[bad]= '-9999'
   pgbinary=pgbinary(foundpg)
   pgbinary[bad]= '-9999'
   doublerg=doublerg(foundpg)
   doublerg[bad]= '-9999'
   otheroscillations=otheroscillations(foundpg)
   otheroscillations[bad]= '-9999'
   weirdlc=weirdlc(foundpg)
   weirdlc[bad]= '-9999'

noseisreason=0.0*CorLogg14
nsr=where(KICID eq '2164123') ;double lined
noseisreason[nsr]=1
nsr=where(noseisreason eq 0 and dr14b.EB_PER ge 0) ;eclipsing
noseisreason[nsr]=2
nsr=where(noseisreason eq 0 and vscatter gt 1.0) ;single lined
noseisreason[nsr]=3

nsr=where(noseisreason eq 0 and doublerg eq 1) ;patrick double rg
noseisreason[nsr]=8
nsr=where(noseisreason eq 0 and otheroscillations eq 1) ;patrick other oscillations
noseisreason[nsr]=9

nsr=where(noseisreason eq 0 and ProtT12allbad gt 0.0 and ProtT12 lt 0.0) ;activity- not RG
noseisreason[nsr]=5
nsr=where(noseisreason eq 0 and ProtT12 gt 0.0) ;activity- RG
noseisreason[nsr]=6
nsr=where(noseisreason eq 0 and vsinimine13cor gt 5.0) ;rapid rotation
noseisreason[nsr]=7



nsr=where(noseisreason eq 0 and delmagcont ne 0.0 and delmagcont gt -3) ;neighbor
noseisreason[nsr]=10
nsr=where(noseisreason eq 0 and pgbinary eq 1) ;patrick likely binary
noseisreason[nsr]=4

nsr=where(noseisreason eq 0 and weirdlc eq 1) ;patrick weird lc
noseisreason[nsr]=11
nsr=where(noseisreason eq 0 and variability eq 1) ;patrick variability
noseisreason[nsr]=12
nsr=where(noseisreason eq 0 and oscillations eq 1) ;patrick oscillations
noseisreason[nsr]=13

nsr=where(noseisreason eq 0)
nsr=14


  readcol2, '~/Documents/Apogee/idl/Results_Gehan_et_al_2018.txt', skipline=1, KICcg,  corerotCG,  $  	
		FORMAT="A,X,X,F"
   match2, KICID, KICcg, foundmine, findorig
   bad=where(foundmine eq -1)
   KICcg=KICcg(foundmine)
   KICcg[bad]= '-9999'
   corerotCG=corerotCG(foundmine)
   corerotCG[bad]= '-9999'



  readcol2, '~/Documents/Apogee/idl/table_gaulme2020_CDS.csv', skipline=48, KICpg,  numaxpg, numaxpgerr, dnupg, dnupgerr, Hmaxpg, $
               Hmaxpgerr, masspg, masspgerr, Rpg, Rpgerr, loggpg, loggpgerr, dpi1pg, visl1pg, sphpg, Protpg, vexpectedpg, nvisitpg, vscatterpg,  flagpg, evstatepg,  $  	
		FORMAT="A,X,X,X,X,X,X,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,X,F"
   match2, KICID, KICpg, foundmine, findorig
   bad=where(foundmine eq -1)
   KICpg=KICpg(foundmine)
   KICpg[bad]= '-9999'
numaxpg=numaxpg(foundmine)
   numaxpg[bad]= '-9999'
numaxpgerr= numaxpgerr(foundmine)
   numaxpgerr[bad]= '-9999'
dnupg=dnupg(foundmine)
   dnupg[bad]= '-9999'
dnupgerr=dnupgerr(foundmine)
   dnupgerr[bad]= '-9999'
Hmaxpg=Hmaxpg(foundmine)
   Hmaxpg[bad]= '-9999'
Hmaxpgerr= Hmaxpgerr(foundmine)
   Hmaxpgerr[bad]= '-9999'
masspg=masspg(foundmine)
   masspg[bad]= '-9999'
masspgerr=masspgerr(foundmine)
   masspgerr[bad]= '-9999'
Rpg=Rpg(foundmine)
   Rpg[bad]= '-9999'
Rpgerr=Rpgerr(foundmine)
   Rpgerr[bad]= '-9999'
loggpg=loggpg(foundmine)
   loggpg[bad]= '-9999'
loggpgerr=loggpgerr(foundmine)
   loggpgerr[bad]= '-9999'
dpi1pg=dpi1pg(foundmine)
   dpi1pg[bad]= '-9999'
visl1pg=visl1pg(foundmine)
   visl1pg[bad]= '-9999'
sphpg=sphpg(foundmine)
   sphpg[bad]= '-9999'
Protpg=Protpg(foundmine)
   Protpg[bad]= '-9999'
vexpectedpg=vexpectedpg(foundmine)
   vexpectedpg[bad]= '-9999'
nvisitpg=nvisitpg(foundmine)
   nvisitpg[bad]= '-9999'
vscatterpg=vscatterpg(foundmine)
   vscatterpg[bad]= '-9999'
flagpg=flagpg(foundmine)
   flagpg[bad]= '-9999'
evstatepg=evstatepg(foundmine)
   evstatepg[bad]= '-9999'



   bacchus=mrdfits('~/Documents/Apogee/Courtney/Curator_APOKASC/year2/v7.0/dr17_nc_abund_v1_0.fits', 1)

;   dr13b=mrdfits('~/Documents/Apogee/APOKASC_cat_v3.6.5.fits', 1)
;   match2, KICID, strcompress(dr13.KEPLER_ID), foundmine, findorig
;   bad=where(foundmine eq -1)
;   dr13b=dr13(foundmine)

   TMASSIDb=bacchus.APOGEE_ID
   CFe17b=bacchus.C_FE
   NFe17b=bacchus.N_FE
   C12C13b=bacchus.C12C13


   match2, TMASSID,  TMASSIDb, foundmine, findorig

   bad=where(foundmine eq -1)
    TMASSIDb= TMASSIDb(foundmine)
    TMASSIDb[bad]= '-9999'
    CFe17b= CFe17b(foundmine)
    CFe17b[bad]= '-9999'
    NFe17b= NFe17b(foundmine)
    NFe17b[bad]= '-9999'
    C12C13b= C12C13b(foundmine)
    C12C13b[bad]= '-9999'

    CN17b=CFe17b-NFe17b
    badcn=where(CFe17b eq -9999 or NFe17b eq -9999)
    CN17b[badcn]='-9999'

; Delete this once we switch to DR17
;   dr17apg=mrdfits('~/Documents/Apogee/Courtney/Curator_APOKASC/year2/v7.0/allStar-dr17-synspec.fits', 1)
;   apg2mass=dr17apg.APOGEE_ID
;   match2, TMASSID, apg2mass, foundmine, findorig   
;   bad=where(foundmine eq -1)
;   CFe17=dr17apg.C_FE
;   CFe17=CFe17(foundmine)
;   if bad[0] ne -1 then CFe17[bad]= '-9999'
;   NFe17=dr17apg.N_FE
;   NFe17=NFe17(foundmine)
;   if bad[0] ne -1 then NFe17[bad]= '-9999'
;    CN17=CFe17-NFe17
;    badcn=where(CFe17 eq -9999 or NFe17 eq -9999)
;   if badcn[0] ne -1 then  CN17[badcn]='-9999'   
;writecol, 'DR17CN.txt', TMASSID, CFe17, NFe17, CN17

;   fparam=dr14apg.FPARAM
;   rawCFE=fparam[4,*]
;   rawCFE=rawCFE(foundmine)
;   rawNFE=fparam[5,*]
;   rawNFE=rawNFE(foundmine)
;   rawmetals=fparam[3,*]
;   rawmetals=rawmetals(foundmine)
;   rawCH=rawCFE+rawmetals
;   rawCN=rawCFE-rawNFE
;   felm=dr14apg.FELEM
;   rawAlH=felm[6,*]
;   rawAlH=rawAlH(foundmine)
;   rawFeH=felm[17,*]
;   rawFeH=rawFeH(foundmine)
;   rawAlFe=rawAlH-rawFeH



readcol, 'DR17CN.txt', apg2mass, CFe17, NFe17, CN17, format='A,F,F,F'
   match2, TMASSID, apg2mass, foundmine, findorig   
   bad=where(foundmine eq -1)
   CFe17=CFe17(foundmine)
   CFe17[bad]= '-9999'
   NFe17=NFe17(foundmine)
   NFe17[bad]= '-9999'
   CN17=CN17(foundmine)
   CN17[bad]= '-9999'

print, TMASSID(0:10), CN17(0:10)




   readcol2, '~/Documents/Apogee/Stello_Suppression_visibility_2MASS.txt', KICDvis3,numaxl1vis3, l1vis3, FORMAT='A,X,F,F' ;
   match2, KICID, KICDvis3, foundvis3, foundorig

   bad=where(foundvis3 eq -1)
   KICDvis3=KICDvis3(foundvis3)
   KICDvis3[bad]= '-9999'
   l1vis3=l1vis3(foundvis3)
   l1vis3[bad]='-9999'
   numaxl1vis3=numaxl1vis3(foundvis3)
   numaxl1vis3[bad]='-9999'
print, 'writing sav file desktop'
cd, '~/Desktop'
SAVE, /variables, filename='APGquick16varsb.sav'


cd, '~/Documents/Apogee/idl'
;print, 'writing sav file'
;SAVE, /variables, filename='APGquick16varsb.sav'


set_plot, 'x'
end


